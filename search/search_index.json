{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SEMA Introduction \u00b6 The System for Emerging Market Analytics is an IT platform designed for Safe Water Enterprises (SWE) across all sectors and regions. See the official home page for more info. Click here to quickly get started. Under Construction This documentation currently goes under frequent updates. If you notice any missing part, it's probably being rewritten or updated at the moment. What is a Safe Water Enterprise? \u00b6 For those who just want to contribute to the codebase, you may want to know the impact of your contributions, so here's a quick background: A Safe Water Enterprise (SWE) is a sustainable solution to supply rural and peri-urban communities with safe drinking water. The concept combines a low-cost and low-maintenance membrane-based water treatment technology with an entrepreneurial approach for the sustainable management of the utility. SWEs are designed to meet the urgent need for access to safe water globally as well as to provide water related health knowledge through trainings and social marketing. Through their community based social enterprise approach, the SWEs are designed to provide a long-term sustainable solution at the kiosk level. Here's, for example, the organizational structure (at the time of writing) of dloHaiti, which is an SWE in Haiti: An HQ team that analyzises the kiosks data, makes decisions based on this data and provides support to kiosk staffs For each kiosk, a kiosk staff which comprises of at least 2 operators and 1 driver (for deliveries) There's more to it, but we keep it simple here. Now, SEMA aims to digitize the procedures that make up this structure and help SWEs scale faster with accurate and on-demand data by providing a set of useful tools through a mobile POS app (used by the kiosk operators) and a back office web app (used by the HQ team). You may want to do more research to get more accustomed to the users of the components that make up SEMA. Features \u00b6 Here's what's included in SEMA: A mobile POS - React Native - (Only Android for now ) that allows to: Browse and pick products Manage customers Manage inventory Process and manage (with limited actions) sales Process and manage loans Do all the above offline A back office on the web - Reacjs - that allows to: Make administrative actions: Manage Products Manage Users/Employees View Water Operations Reports View Sales Reports View Demographics Data View Volume Reports An API server - Nodejs/Expressjs - that acts as an intermediate between all the clients and the database See the Architecture and Components section for more. How is this doc structured? \u00b6 This technical documentation was designed to be easily browsable. Here's what to expect: On the left side, you will find the listing of each main section. In the middle resides the content of the current section. In the top right corner of every content, you'll notice a pencil icon that links directly to the source code of the current content so you can edit the content and make a pull request so you can contribute to it. On the right side, there is a table of contents that lists sub-sections of the current section. In the top right, you can search throughout the whole documentation and also get basic information about our main repository from Github. You can also click on the link to visit it. Right before the footer, at the end of each page, you can easily go to the previous or the next section. Most sections have their own Disqus comment 1 sub-section at the end where developers and people who read the docs can ask questions about the section. Each sub-section has the paragraph symbol \u00b6 link at the end of its headline - when you hover your cursor over it - that makes it possible to directly link to that sub-section. Some pages on the navigation menu have sub-pages and they are listed in a dropdown list. Some sub-pages even have their own sub-pages. This whole documentation site is responsive, it'll look good and browsable on both desktop and mobile devices. And that's it. We hope you enjoy browsing around this doc as much as we enjoyed writing it. Feel free to leave a comment on a section if you see anything wrong or if something is not clear enough. Our core developers will get back to you shortly and this will definitely help others who come after. Comments go under moderation before they are made public because we don't like spammers. \u21a9","title":"Introduction"},{"location":"#sema-introduction","text":"The System for Emerging Market Analytics is an IT platform designed for Safe Water Enterprises (SWE) across all sectors and regions. See the official home page for more info. Click here to quickly get started. Under Construction This documentation currently goes under frequent updates. If you notice any missing part, it's probably being rewritten or updated at the moment.","title":"SEMA Introduction"},{"location":"#what-is-a-safe-water-enterprise","text":"For those who just want to contribute to the codebase, you may want to know the impact of your contributions, so here's a quick background: A Safe Water Enterprise (SWE) is a sustainable solution to supply rural and peri-urban communities with safe drinking water. The concept combines a low-cost and low-maintenance membrane-based water treatment technology with an entrepreneurial approach for the sustainable management of the utility. SWEs are designed to meet the urgent need for access to safe water globally as well as to provide water related health knowledge through trainings and social marketing. Through their community based social enterprise approach, the SWEs are designed to provide a long-term sustainable solution at the kiosk level. Here's, for example, the organizational structure (at the time of writing) of dloHaiti, which is an SWE in Haiti: An HQ team that analyzises the kiosks data, makes decisions based on this data and provides support to kiosk staffs For each kiosk, a kiosk staff which comprises of at least 2 operators and 1 driver (for deliveries) There's more to it, but we keep it simple here. Now, SEMA aims to digitize the procedures that make up this structure and help SWEs scale faster with accurate and on-demand data by providing a set of useful tools through a mobile POS app (used by the kiosk operators) and a back office web app (used by the HQ team). You may want to do more research to get more accustomed to the users of the components that make up SEMA.","title":"What is a Safe Water Enterprise?"},{"location":"#features","text":"Here's what's included in SEMA: A mobile POS - React Native - (Only Android for now ) that allows to: Browse and pick products Manage customers Manage inventory Process and manage (with limited actions) sales Process and manage loans Do all the above offline A back office on the web - Reacjs - that allows to: Make administrative actions: Manage Products Manage Users/Employees View Water Operations Reports View Sales Reports View Demographics Data View Volume Reports An API server - Nodejs/Expressjs - that acts as an intermediate between all the clients and the database See the Architecture and Components section for more.","title":"Features"},{"location":"#how-is-this-doc-structured","text":"This technical documentation was designed to be easily browsable. Here's what to expect: On the left side, you will find the listing of each main section. In the middle resides the content of the current section. In the top right corner of every content, you'll notice a pencil icon that links directly to the source code of the current content so you can edit the content and make a pull request so you can contribute to it. On the right side, there is a table of contents that lists sub-sections of the current section. In the top right, you can search throughout the whole documentation and also get basic information about our main repository from Github. You can also click on the link to visit it. Right before the footer, at the end of each page, you can easily go to the previous or the next section. Most sections have their own Disqus comment 1 sub-section at the end where developers and people who read the docs can ask questions about the section. Each sub-section has the paragraph symbol \u00b6 link at the end of its headline - when you hover your cursor over it - that makes it possible to directly link to that sub-section. Some pages on the navigation menu have sub-pages and they are listed in a dropdown list. Some sub-pages even have their own sub-pages. This whole documentation site is responsive, it'll look good and browsable on both desktop and mobile devices. And that's it. We hope you enjoy browsing around this doc as much as we enjoyed writing it. Feel free to leave a comment on a section if you see anything wrong or if something is not clear enough. Our core developers will get back to you shortly and this will definitely help others who come after. Comments go under moderation before they are made public because we don't like spammers. \u21a9","title":"How is this doc structured?"},{"location":"architecture-and-components-overview/","text":"In a nutshell, the clients communicate with the REST API to gather and send data from and to the database. Here are the technologies currently being used by each of the components that make up SEMA: The back office web client: Reactjs The POS mobile client: React Native The REST API : Nodejs and Expressjs The Database : MySQL The POS mobile client works offline first.","title":"Architecture and Components Overview"},{"location":"contributing/","text":"Contributing \u00b6","title":"Contributing"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"deploying-to-production/","text":"Deploying to production Things are getting serious \u00b6 This section is a tutorial on how to deploy the system in production mode. The previous section was about running it locally and we strongly recommend that you go through the process before you start with this one because they have a lot in common. In fact, this section is only meant to be a best practices tutorial when it comes to production deployment, so we will not go over some details that we covered in the Getting Started section, therefore, please, go through it if you haven't done so yet. Note Unless otherwise noted, all the instructions below should happen on the cloud, on your own SSH server. Not your personal computer. The SSH Server \u00b6 Prerequisites 1 \u00b6 From this point of this tutorial, here's what you'll need to follow along: A linux server - preferably Ubuntu - with SSH access. We recommend DigitalOcean Creating a Sudo User \u00b6 Assuming you got yourself an SSH server with root access, let's configure it. Follow those steps to create a new sudo user so you don't have to login as root: Login to the server as the root user: 1 ssh root@SERVER_IP_ADDRESS Replace SERVER_IP_ADDRESS with the IP address of your SSH server Use the adduser command to add a new user to your system. 1 adduser username Be sure to replace username with the user that you want to create. Set and confirm the new user's password at the prompt. A strong password is highly recommended! Follow the prompts to set the new user's information. It is fine to accept the defaults to leave all of this information blank. Use the usermod command to add the user to the sudo group. 1 usermod -aG sudo username By default, on Ubuntu, members of the sudo group have sudo privileges. Test sudo access on new user account Use the su command to switch to the new user account. su - username As the new user, verify that you can use sudo by prepending \"sudo\" to the command that you want to run with superuser privileges. sudo command_to_run For example, you can list the contents of the /root directory, which is normally only accessible to the root user. sudo ls -la /root The first time you use sudo in a session, you will be prompted for the password of the user account. Enter the password to proceed. If your user is in the proper group and you entered the password correctly, the command that you issued with sudo should run with root privileges. Logout of the sudo user account exit Logout of the root account exit From now on, only login through the sudo account you just created, it is not safe to access and deploy a project on an SSH server using root. ssh username@SERVER_IP_ADDRESS Generating and Linking an SSH Key to Your Github Account \u00b6 This one is an optional step. Linking an SSH key to your Github account will save you time when pulling from Github. It won't ask you for a password anymore. Warning Notice our use of pulling here and not pushing too. We strongly discourage you to make changes to the codebase from a production server. If you're going to make changes that you want to save to your repo, make them on a development machine, push them to your repo and pull them from the production one. This will also make your connection with Github even more secure. Github already has great documentation for those: Generating a new SSH key: Github Docs Adding/Linking an SSH key to your Github account: Github docs The Database \u00b6 Prerequisites 2 \u00b6 From this point of this tutorial, here's what you'll need to follow along: Install MySQL: Follow this link for Ubuntu 16.04 Or find the right turorial for your version of Ubuntu. MySQL Secure Installation \u00b6 While installing MySQL, you should have received a prompt to enter a password for the root MySQL user. You will need it for subsequent root connections. With MySQL installed, let's start by running the mysql_secure_installation script that comes with MySQL: 1 mysql_secure_installation This will show you some best practices for installing MySQL on a production server. It's up to you to activate/deactivate some options as suggested. Whatever you do here won't affect our deployment. Creating a new user and granting permissions \u00b6 Connect to the MySQL server as root: 1 mysql -uroot -p Create the new user 1 CREATE USER 'USERNAME'@'%' IDENTIFIED BY 'PASSWORD'; Make sure to replace USERNAME and PASSWORD with your own values Grant privileges to the new user 1 GRANT ALL PRIVILEGES ON *.* TO 'USERNAME'@'%'; The asterisks in this command refer to the database and table (respectively) that they can access. This specific command allows to the user to read, edit, execute and perform all tasks across all the databases and tables. In this example we are granting newuser full root access to everything in our database. While this is helpful for explaining some MySQL concepts, it may be impractical for most use cases and could put your database\u2019s security at high risk. Once you have finalized the permissions that you want to set up for your new users, always be sure to reload all the privileges. 1 FLUSH PRIVILEGES; Logout of the root user connection. 1 exit Login as the new user. 1 mysqk -uUSERNAME -p Now that your database is ready for production use, follow the instructions over there to populate the basic data in its tables. Configurations \u00b6 Let's now setup the configuration file, follow the instructions in this sub-section . The Back Office Web Client \u00b6 Prerequisites 3 \u00b6 From this point of this tutorial, here's what you'll need to follow along: Install nvm: Follow this link for instructions. Install latest LTS version of Node and npm: nvm install --lts Install Yarn: npm i -g yarn Install react-scripts (To be able to build the client): yarn global add react-scripts Nginx (Reverse Proxy): sudo apt install nginx Pm2 (Robust and easy to use process manager): yarn global add pm2 Create a new root directory to contain the whole project: mkdir sema Move into the root directory: cd sema Create a new repository by forking the official back office web client repo through Github: Follow this link for instructions. Link to the repo: https://github.com/untapped-inc/sema-back-office-web Clone your new repository to a local directory: git clone https://github.com/YOUR-USERNAME/sema-back-office-web.git - Make sure to change YOUR-USERNAME to your Github username or the one you chose to fork the repo for Move into the root directory of the back office web client: cd sema-back-office-web Install react-scripts (To be able to run the client): yarn global add react-scripts From this point on, we expect that you are in the root directory of the back office web client Building the client \u00b6 Let's keep going by creating an optimized production build of the dashboard client: Install client dependencies: yarn Build the client: yarn build If you get a fatal error about not having enough memory while building the client, just add this - GENERATE_SOURCEMAP=false - to the .env file of the back office web client directory and then run yarn build again: echo 'GENERATE_SOURCEMAP=false' >> .env && yarn build The REST API \u00b6 Prerequisites 4 \u00b6 From this point of this tutorial, here's what you'll need to follow along: Assuming you are currently in the sema-back-office-web directory, move back into the root directory: cd .. Create a new repository by forking the official REST API repo through Github: Follow this link for instructions. Link to the repo: https://github.com/untapped-inc/sema-core Clone your new repository to a local directory: git clone https://github.com/YOUR-USERNAME/sema-core.git - Make sure to change YOUR-USERNAME to your Github username or the one you chose to fork the repo for Move into the root directory of the REST API: cd sema-core From this point on, we expect that you are in the root directory of the REST API Serving the REST API \u00b6 Now that we have the Back Office client ready to be served, let's: Create a new public_react directory: 1 mkdir public_react Copy the entire build directory from the back office client build dir to the public_react directory: 1 cp -rf ../sema-back-office-web/build ./public_react Assuming you've configured your .env file correctly , install server dependencies: yarn Start the server with PM2: pm2 start bin/www --name sema-server . Name it however you want so you can easily refer to it later. Get your server IP address. 1 curl icanhazip.com Test the server access via curl - Since we haven't configured Nginx yet, we'll test it from port 3001. 1 curl http://YOUR_SERVER_IP_ADDRESS:3001/untapped/health-check Replace YOUR_SERVER_IP_ADDRESS with your SSH server IP address. This should return something like {\"server\":\"Ok\",\"database\":\"Ok\"} Setup Ngninx using this tutorial Configure Nginx by editing - WITH SUPER USER - /etc/nginx/sites-available/default. 1 sudo vim /etc/nginx/sites-available/default Within the server block, there is an existing location / block. Replace the contents of that block with the following configuration. 1 2 3 4 5 6 7 8 location / { proxy_pass http : // localhost : 3001 ; proxy_http_version 1.1 ; proxy_set_header Upgrade $http_upgrade ; proxy_set_header Connection 'upgrade' ; proxy_set_header Host $host ; proxy_cache_bypass $http_upgrade ; } Make sure you didn't introduce any syntax errors: sudo nginx -t Restart Nginx: sudo systemctl restart nginx Test the server access without using the port: 1 curl http://YOUR-SERVER-IP-ADDRESS/untapped/health-check This should return something like {\"server\":\"Ok\",\"database\":\"Ok\"} . You can now setup DNS zone records for your server. The POS APK \u00b6 Prerequisites 5 \u00b6 From this point of this tutorial, here's what you'll need to follow along: Assuming you are currently in the sema-core directory, move back into the root directory: cd .. Create a new repository by forking the official POS mobile client repo through Github: Follow this link for instructions. Link to the repo: https://github.com/untapped-inc/sema-pos-mobile Clone your new repository to a local directory: git clone https://github.com/YOUR-USERNAME/sema-pos-mobile.git - Make sure to change YOUR-USERNAME to your Github username or the one you chose to fork the repo for Move into the root directory of the POS mobile client: cd sema-pos-mobile From this point on, we expect that you are in the root directory of the POS mobile client We will now build a customized version of the POS app. For this part, do not do it on the SSH server. Do it locally on your development machine. Customizing \u00b6 Customizing the POS app for your SWE is a breeze. Let's get to it. Setting up \u00b6 Follow the Android setup steps at the official react native docs . Make sure you select the appropriate tabs in the instructions. \"Building Projects with Native Code\" \"Development OS: macOS or Windows or Linux. Target OS: Android\" Renaming the POS app \u00b6 To rename the POS app, simply use our rename yarn/npm script. 1 yarn rename APPNAME \"ON-SCREEN APP NAME\" The rename script takes two arguments, APPNAME and ON-SCREEN APP NAME . APPNAME is the internal name the Android application will use for the app. ON-SCREEN APP NAME is the name the user will see on the screen once the app is installed on the device. Notice how it's between quotes while APPNAME is not, the on-screen name can have spaces while the internal name cannot. i.e.: yarn rename JIBUPOS \"SEMA Jibu\" Rebranding the POS app \u00b6 Rebranding involves changing the logos on the POS app, the on-screen app logo and the background of the login screen. At the time of writing, here's what the current logo looks like: There's a white text on the logo, try to drag it around to notice it. and here's what the background of the login screen looks like: Follow those steps to change those images to your liking: For the login screen background image, it must be a jpg file, simply replace the file located at mobile_client/src/images/swe-login.jpg with your own image. A good base size for this image would be a width of 758 and a height of 563 - 758 x 563. Make sure you name your new image to swe-login.jpg or it will not show up on the POS app once it's built. Info If your image is a png file, you can simply rename it to a jpg file, it will still work. For the logo and on-screen app image, it must be a png file. Rename your new logo to ic_launcher.png Go to the NativeScrip Image Builder website In the Upload an Image section, select Static Image - Android Browse for your ic_launcher.png file Press Upload App Image It will download the app images to your computer as a zip file. After extracting the zip file, rename the folders named drawable-hdpi , drawable-mdpi , drawable-xhdpi and drawable-xxhdpi to mipmap-hdpi , mipmap-mdpi , mipmap-xhdpi and mipmap-xxhdpi respectively. Select and copy the 4 new folders you just renamed and paste them in the directory located at android/app/src/main/res . Replace the ones that were already there. Your app is now ready to be built. Building \u00b6 To build the POS apk file simply use the build_sema_apk.sh . 1 sh build_sema_apk.sh Here's an example usage of this script: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 Generating the signing key Password: // I enter my sudo user password Enter keystore password: // I enter a new password for the keystore that's going to be generated Re-enter new password: // I re-enter the same password for confirmation What is your first and last name? [Unknown]: Nick Rameau What is the name of your organizational unit? [Unknown]: Software Development What is the name of your organization? [Unknown]: Untapped, Inc. What is the name of your City or Locality? [Unknown]: Port-au-Prince What is the name of your State or Province? [Unknown]: Ouest What is the two-letter country code for this unit? [Unknown]: HT Is CN=Nick Rameau, OU=Software Development, O=\"Untapped, Inc.\", L=Port-au-Prince, ST=Ouest, C=HT correct? [no]: yes Generating 2,048 bit RSA key pair and self-signed certificate (SHA256withRSA) with a validity of 10,000 days for: CN=Nick Rameau, OU=Software Development, O=\"Untapped, Inc.\", L=Port-au-Prince, ST=Ouest, C=HT [Storing android/app/sema-pos-key.keystore] Enter your keystore password again: // I re-enter my keystore password Adding keystore password to the gradle config file Generating the release APK ... And you should get a BUILD_SUCCESSFUL message at the end of the script output message. You now have an APK file of your customized POS app. The APK file is located at android/app/build/outputs/apk/release . It's named app-release.apk . Feel free to rename this file however you like. The build script generated a keystore file at android/app named sema-pos-key.keystore . You will need this file if you ever decide to host the APK file on the Google Play store. Without this file, you won't be able to send updates to the Play store for your app. And that's it! You now have the whole platform running in production. Neat. Where to go From Here? \u00b6 Now that you have SEMA running successfully for your SWE. Here are some interesting links: Join the community chat so you can have 24/7 support for free from both the community and the core developers of SEMA. Feel free to leave a comment down below for any questions and clarifications.","title":"Deploying to Production"},{"location":"deploying-to-production/#deploying-to-production-things-are-getting-serious","text":"This section is a tutorial on how to deploy the system in production mode. The previous section was about running it locally and we strongly recommend that you go through the process before you start with this one because they have a lot in common. In fact, this section is only meant to be a best practices tutorial when it comes to production deployment, so we will not go over some details that we covered in the Getting Started section, therefore, please, go through it if you haven't done so yet. Note Unless otherwise noted, all the instructions below should happen on the cloud, on your own SSH server. Not your personal computer.","title":"Deploying to production Things are getting serious"},{"location":"deploying-to-production/#the-ssh-server","text":"","title":"The SSH Server"},{"location":"deploying-to-production/#prerequisites-1","text":"From this point of this tutorial, here's what you'll need to follow along: A linux server - preferably Ubuntu - with SSH access. We recommend DigitalOcean","title":"Prerequisites 1"},{"location":"deploying-to-production/#creating-a-sudo-user","text":"Assuming you got yourself an SSH server with root access, let's configure it. Follow those steps to create a new sudo user so you don't have to login as root: Login to the server as the root user: 1 ssh root@SERVER_IP_ADDRESS Replace SERVER_IP_ADDRESS with the IP address of your SSH server Use the adduser command to add a new user to your system. 1 adduser username Be sure to replace username with the user that you want to create. Set and confirm the new user's password at the prompt. A strong password is highly recommended! Follow the prompts to set the new user's information. It is fine to accept the defaults to leave all of this information blank. Use the usermod command to add the user to the sudo group. 1 usermod -aG sudo username By default, on Ubuntu, members of the sudo group have sudo privileges. Test sudo access on new user account Use the su command to switch to the new user account. su - username As the new user, verify that you can use sudo by prepending \"sudo\" to the command that you want to run with superuser privileges. sudo command_to_run For example, you can list the contents of the /root directory, which is normally only accessible to the root user. sudo ls -la /root The first time you use sudo in a session, you will be prompted for the password of the user account. Enter the password to proceed. If your user is in the proper group and you entered the password correctly, the command that you issued with sudo should run with root privileges. Logout of the sudo user account exit Logout of the root account exit From now on, only login through the sudo account you just created, it is not safe to access and deploy a project on an SSH server using root. ssh username@SERVER_IP_ADDRESS","title":"Creating a Sudo User"},{"location":"deploying-to-production/#generating-and-linking-an-ssh-key-to-your-github-account","text":"This one is an optional step. Linking an SSH key to your Github account will save you time when pulling from Github. It won't ask you for a password anymore. Warning Notice our use of pulling here and not pushing too. We strongly discourage you to make changes to the codebase from a production server. If you're going to make changes that you want to save to your repo, make them on a development machine, push them to your repo and pull them from the production one. This will also make your connection with Github even more secure. Github already has great documentation for those: Generating a new SSH key: Github Docs Adding/Linking an SSH key to your Github account: Github docs","title":"Generating and Linking an SSH Key to Your Github Account"},{"location":"deploying-to-production/#the-database","text":"","title":"The Database"},{"location":"deploying-to-production/#prerequisites-2","text":"From this point of this tutorial, here's what you'll need to follow along: Install MySQL: Follow this link for Ubuntu 16.04 Or find the right turorial for your version of Ubuntu.","title":"Prerequisites 2"},{"location":"deploying-to-production/#mysql-secure-installation","text":"While installing MySQL, you should have received a prompt to enter a password for the root MySQL user. You will need it for subsequent root connections. With MySQL installed, let's start by running the mysql_secure_installation script that comes with MySQL: 1 mysql_secure_installation This will show you some best practices for installing MySQL on a production server. It's up to you to activate/deactivate some options as suggested. Whatever you do here won't affect our deployment.","title":"MySQL Secure Installation"},{"location":"deploying-to-production/#creating-a-new-user-and-granting-permissions","text":"Connect to the MySQL server as root: 1 mysql -uroot -p Create the new user 1 CREATE USER 'USERNAME'@'%' IDENTIFIED BY 'PASSWORD'; Make sure to replace USERNAME and PASSWORD with your own values Grant privileges to the new user 1 GRANT ALL PRIVILEGES ON *.* TO 'USERNAME'@'%'; The asterisks in this command refer to the database and table (respectively) that they can access. This specific command allows to the user to read, edit, execute and perform all tasks across all the databases and tables. In this example we are granting newuser full root access to everything in our database. While this is helpful for explaining some MySQL concepts, it may be impractical for most use cases and could put your database\u2019s security at high risk. Once you have finalized the permissions that you want to set up for your new users, always be sure to reload all the privileges. 1 FLUSH PRIVILEGES; Logout of the root user connection. 1 exit Login as the new user. 1 mysqk -uUSERNAME -p Now that your database is ready for production use, follow the instructions over there to populate the basic data in its tables.","title":"Creating a new user and granting permissions"},{"location":"deploying-to-production/#configurations","text":"Let's now setup the configuration file, follow the instructions in this sub-section .","title":"Configurations"},{"location":"deploying-to-production/#the-back-office-web-client","text":"","title":"The Back Office Web Client"},{"location":"deploying-to-production/#prerequisites-3","text":"From this point of this tutorial, here's what you'll need to follow along: Install nvm: Follow this link for instructions. Install latest LTS version of Node and npm: nvm install --lts Install Yarn: npm i -g yarn Install react-scripts (To be able to build the client): yarn global add react-scripts Nginx (Reverse Proxy): sudo apt install nginx Pm2 (Robust and easy to use process manager): yarn global add pm2 Create a new root directory to contain the whole project: mkdir sema Move into the root directory: cd sema Create a new repository by forking the official back office web client repo through Github: Follow this link for instructions. Link to the repo: https://github.com/untapped-inc/sema-back-office-web Clone your new repository to a local directory: git clone https://github.com/YOUR-USERNAME/sema-back-office-web.git - Make sure to change YOUR-USERNAME to your Github username or the one you chose to fork the repo for Move into the root directory of the back office web client: cd sema-back-office-web Install react-scripts (To be able to run the client): yarn global add react-scripts From this point on, we expect that you are in the root directory of the back office web client","title":"Prerequisites 3"},{"location":"deploying-to-production/#building-the-client","text":"Let's keep going by creating an optimized production build of the dashboard client: Install client dependencies: yarn Build the client: yarn build If you get a fatal error about not having enough memory while building the client, just add this - GENERATE_SOURCEMAP=false - to the .env file of the back office web client directory and then run yarn build again: echo 'GENERATE_SOURCEMAP=false' >> .env && yarn build","title":"Building the client"},{"location":"deploying-to-production/#the-rest-api","text":"","title":"The REST API"},{"location":"deploying-to-production/#prerequisites-4","text":"From this point of this tutorial, here's what you'll need to follow along: Assuming you are currently in the sema-back-office-web directory, move back into the root directory: cd .. Create a new repository by forking the official REST API repo through Github: Follow this link for instructions. Link to the repo: https://github.com/untapped-inc/sema-core Clone your new repository to a local directory: git clone https://github.com/YOUR-USERNAME/sema-core.git - Make sure to change YOUR-USERNAME to your Github username or the one you chose to fork the repo for Move into the root directory of the REST API: cd sema-core From this point on, we expect that you are in the root directory of the REST API","title":"Prerequisites 4"},{"location":"deploying-to-production/#serving-the-rest-api","text":"Now that we have the Back Office client ready to be served, let's: Create a new public_react directory: 1 mkdir public_react Copy the entire build directory from the back office client build dir to the public_react directory: 1 cp -rf ../sema-back-office-web/build ./public_react Assuming you've configured your .env file correctly , install server dependencies: yarn Start the server with PM2: pm2 start bin/www --name sema-server . Name it however you want so you can easily refer to it later. Get your server IP address. 1 curl icanhazip.com Test the server access via curl - Since we haven't configured Nginx yet, we'll test it from port 3001. 1 curl http://YOUR_SERVER_IP_ADDRESS:3001/untapped/health-check Replace YOUR_SERVER_IP_ADDRESS with your SSH server IP address. This should return something like {\"server\":\"Ok\",\"database\":\"Ok\"} Setup Ngninx using this tutorial Configure Nginx by editing - WITH SUPER USER - /etc/nginx/sites-available/default. 1 sudo vim /etc/nginx/sites-available/default Within the server block, there is an existing location / block. Replace the contents of that block with the following configuration. 1 2 3 4 5 6 7 8 location / { proxy_pass http : // localhost : 3001 ; proxy_http_version 1.1 ; proxy_set_header Upgrade $http_upgrade ; proxy_set_header Connection 'upgrade' ; proxy_set_header Host $host ; proxy_cache_bypass $http_upgrade ; } Make sure you didn't introduce any syntax errors: sudo nginx -t Restart Nginx: sudo systemctl restart nginx Test the server access without using the port: 1 curl http://YOUR-SERVER-IP-ADDRESS/untapped/health-check This should return something like {\"server\":\"Ok\",\"database\":\"Ok\"} . You can now setup DNS zone records for your server.","title":"Serving the REST API"},{"location":"deploying-to-production/#the-pos-apk","text":"","title":"The POS APK"},{"location":"deploying-to-production/#prerequisites-5","text":"From this point of this tutorial, here's what you'll need to follow along: Assuming you are currently in the sema-core directory, move back into the root directory: cd .. Create a new repository by forking the official POS mobile client repo through Github: Follow this link for instructions. Link to the repo: https://github.com/untapped-inc/sema-pos-mobile Clone your new repository to a local directory: git clone https://github.com/YOUR-USERNAME/sema-pos-mobile.git - Make sure to change YOUR-USERNAME to your Github username or the one you chose to fork the repo for Move into the root directory of the POS mobile client: cd sema-pos-mobile From this point on, we expect that you are in the root directory of the POS mobile client We will now build a customized version of the POS app. For this part, do not do it on the SSH server. Do it locally on your development machine.","title":"Prerequisites 5"},{"location":"deploying-to-production/#customizing","text":"Customizing the POS app for your SWE is a breeze. Let's get to it.","title":"Customizing"},{"location":"deploying-to-production/#setting-up","text":"Follow the Android setup steps at the official react native docs . Make sure you select the appropriate tabs in the instructions. \"Building Projects with Native Code\" \"Development OS: macOS or Windows or Linux. Target OS: Android\"","title":"Setting up"},{"location":"deploying-to-production/#renaming-the-pos-app","text":"To rename the POS app, simply use our rename yarn/npm script. 1 yarn rename APPNAME \"ON-SCREEN APP NAME\" The rename script takes two arguments, APPNAME and ON-SCREEN APP NAME . APPNAME is the internal name the Android application will use for the app. ON-SCREEN APP NAME is the name the user will see on the screen once the app is installed on the device. Notice how it's between quotes while APPNAME is not, the on-screen name can have spaces while the internal name cannot. i.e.: yarn rename JIBUPOS \"SEMA Jibu\"","title":"Renaming the POS app"},{"location":"deploying-to-production/#rebranding-the-pos-app","text":"Rebranding involves changing the logos on the POS app, the on-screen app logo and the background of the login screen. At the time of writing, here's what the current logo looks like: There's a white text on the logo, try to drag it around to notice it. and here's what the background of the login screen looks like: Follow those steps to change those images to your liking: For the login screen background image, it must be a jpg file, simply replace the file located at mobile_client/src/images/swe-login.jpg with your own image. A good base size for this image would be a width of 758 and a height of 563 - 758 x 563. Make sure you name your new image to swe-login.jpg or it will not show up on the POS app once it's built. Info If your image is a png file, you can simply rename it to a jpg file, it will still work. For the logo and on-screen app image, it must be a png file. Rename your new logo to ic_launcher.png Go to the NativeScrip Image Builder website In the Upload an Image section, select Static Image - Android Browse for your ic_launcher.png file Press Upload App Image It will download the app images to your computer as a zip file. After extracting the zip file, rename the folders named drawable-hdpi , drawable-mdpi , drawable-xhdpi and drawable-xxhdpi to mipmap-hdpi , mipmap-mdpi , mipmap-xhdpi and mipmap-xxhdpi respectively. Select and copy the 4 new folders you just renamed and paste them in the directory located at android/app/src/main/res . Replace the ones that were already there. Your app is now ready to be built.","title":"Rebranding the POS app"},{"location":"deploying-to-production/#building","text":"To build the POS apk file simply use the build_sema_apk.sh . 1 sh build_sema_apk.sh Here's an example usage of this script: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 Generating the signing key Password: // I enter my sudo user password Enter keystore password: // I enter a new password for the keystore that's going to be generated Re-enter new password: // I re-enter the same password for confirmation What is your first and last name? [Unknown]: Nick Rameau What is the name of your organizational unit? [Unknown]: Software Development What is the name of your organization? [Unknown]: Untapped, Inc. What is the name of your City or Locality? [Unknown]: Port-au-Prince What is the name of your State or Province? [Unknown]: Ouest What is the two-letter country code for this unit? [Unknown]: HT Is CN=Nick Rameau, OU=Software Development, O=\"Untapped, Inc.\", L=Port-au-Prince, ST=Ouest, C=HT correct? [no]: yes Generating 2,048 bit RSA key pair and self-signed certificate (SHA256withRSA) with a validity of 10,000 days for: CN=Nick Rameau, OU=Software Development, O=\"Untapped, Inc.\", L=Port-au-Prince, ST=Ouest, C=HT [Storing android/app/sema-pos-key.keystore] Enter your keystore password again: // I re-enter my keystore password Adding keystore password to the gradle config file Generating the release APK ... And you should get a BUILD_SUCCESSFUL message at the end of the script output message. You now have an APK file of your customized POS app. The APK file is located at android/app/build/outputs/apk/release . It's named app-release.apk . Feel free to rename this file however you like. The build script generated a keystore file at android/app named sema-pos-key.keystore . You will need this file if you ever decide to host the APK file on the Google Play store. Without this file, you won't be able to send updates to the Play store for your app. And that's it! You now have the whole platform running in production. Neat.","title":"Building"},{"location":"deploying-to-production/#where-to-go-from-here","text":"Now that you have SEMA running successfully for your SWE. Here are some interesting links: Join the community chat so you can have 24/7 support for free from both the community and the core developers of SEMA. Feel free to leave a comment down below for any questions and clarifications.","title":"Where to go From Here?"},{"location":"getting-started/","text":"Getting Started Running it locally \u00b6 This section is a tutorial on how to get you started with setting up the platform on your system locally so you can test it. Windows Users We only cover *nix systems like Linux and OS X for now . Windows users will need to figure out alternatives on their own. 1 The Database \u00b6 Let's get started with the database. Prerequisites 1 \u00b6 From this point of this tutorial, here's what you'll need to follow along: Install MySQL: Follow this link for instructions for your system. Make sure you create an admin user, or using root is fine too. 3 Install nvm: Follow this link for instructions. Install latest LTS version of Node and npm: nvm install --lts Install Yarn: npm i -g yarn Configurations \u00b6 Assuming you've successfully installed MySQL on your system and created an admin user (not root ), let's start creating the sema_core database and populating the basic data for the project. Creating the database \u00b6 Here are the steps to follow: Open your MySQL Workbench Go to File > Open SQL Script... Find your repository folder and choose the file database > create_schema.sql Go to Query > Execute (All or Selection). It will run the script and create your new database This will create a new database named sema_core . If you want to rename it, either use a tool like MySQL Workbench or make sure you edit the create_schema.sql file fromt this line: CREATE SCHEMA sema_core; before you Execute it. Populating the required tables \u00b6 Now that the database is created, let's populate some tables in there. Feel free to change the values to what you want, except where it's mentioned to keep them as is. Let's start by populating the MySQL views necessary: Still in MySQL Workbench, using the same steps above, select the customer_details_view.sql located in the database folder and run it. Then do the same for the receipt_details_view.sql file. Let's add a role 1 2 INSERT INTO ` role ` ( ` id ` , ` authority ` , ` code ` ) VALUES ( 1 , 'Admin' , 'admin' ); Then the user: 1 2 INSERT INTO ` user ` ( ` id ` , ` username ` , ` email ` , ` password ` , ` first_name ` , ` last_name ` ) VALUES ( 1 , 'administrator' , 'admin@untapped-inc.com' , 'USER_PASSWORD' , 'Admin' , 'User' ); Note Notice the USER_PASSWORD placeholder for this user. Here's how to get it: First, install the bcrypt-cli npm package globally: yarn global add bcrypt-cli Then run the following command to get the encrypted password: bcrypt-cli \"AdminPassword\" 10 Replace AdminPassword with the one you want and keep the last value to 10. This is the bcrypt salt round, you'll know why we use it in the Configurations sub-section. Then use this encrypted password for this customer. Repeat the last step for subsequent ones. Let's now map the user to the role 1 INSERT INTO ` user_role ` ( ` role_id ` , ` user_id ` ) VALUES ( 1 , 1 ); Now, time to add a country: 1 2 INSERT INTO ` country ` ( ` id ` , ` name ` ) VALUES ( 1 , 'Haiti' ); Now, let's add a region: 1 2 INSERT INTO ` region ` ( ` id ` , ` name ` , ` description ` , ` country_id ` ) VALUES ( 1 , 'Ouest' , 'On the West side' , 1 ); Next, add a kiosk/site: 1 2 INSERT INTO ` kiosk ` ( ` id ` , ` name ` , ` region_id ` ) VALUES ( 1 , 'Bois9' , 1 ); Now, add a few customer types: 1 2 3 4 INSERT INTO ` customer_type ` ( ` id ` , ` name ` ) VALUES ( 1 , 'anonymous' ); INSERT INTO ` customer_type ` ( ` id ` , ` name ` ) VALUES ( 2 , 'Small Store' ); Note The anonymous type is required. Do not change it. Now for the sales channels: 1 2 3 4 INSERT INTO ` sales_channel ` ( ` id ` , ` name ` , ` description ` ) VALUES ( 1 , 'reseller' , 'Resellers' ); INSERT INTO ` sales_channel ` ( ` id ` , ` name ` , ` description ` ) VALUES ( 2 , 'direct' , 'Customers that walk up to the kiosk' ); Next, add a couple of customers: 1 2 3 4 INSERT INTO ` customer_account ` ( ` id ` , ` name ` , ` customer_type_id ` , ` sales_channel_id ` , ` kiosk_id ` , ` address_line1 ` , ` gps_coordinates ` , ` phone_number ` ) VALUES ( 'CUSTOMER_UUID' , 'Direct Client' , 2 , 2 , 1 , '--------------------' , 'gps' , '---------------------' ); INSERT INTO ` customer_account ` ( ` id ` , ` name ` , ` customer_type_id ` , ` sales_channel_id ` , ` kiosk_id ` , ` address_line1 ` , ` phone_number ` ) VALUES ( 'CUSTOMER_UUID' , 'Chez Matilda' , 1 , 1 , 1 , '25, rue Fernand' , '+50937120500' ); Info Notice the CUSTOMER_UUID placeholder value for those customers. Here's how to get them: First, install the uuid npm package globally: yarn global add uuid Then simply run uuid to generate a uuid in your terminal: uuid Then use this uuid for one customer by replacing the CUSTOMER_UUID placeholder with it. Repeat the last two steps for subsequent ones. Now it's time to add some product categories: 1 2 INSERT INTO ` product_category ` ( ` id ` , ` description ` , ` name ` ) VALUES ( 1 , 'Water products' , 'water_products' ); Then add a product 1 2 INSERT INTO ` product ` ( ` id ` , ` name ` , ` sku ` , ` description ` , ` category_id ` , ` price_amount ` , ` price_currency ` , ` unit_per_product ` , ` unit_measure ` , ` cogs_amount ` , ` base64encoded_image ` ) VALUES ( 1 , '5.0L bottle' , 'MD5G' , '5 Liter water bottle' , 1 , 4000 . 00 , 'UGX' , 5 , 'liters' , 2000 . 00 , 'PRODUCT_BASE64_ENCODED_IMAGE' ); Note As of now, you must have at least one product with a unit_measure value of liters . Notice the PRODUCT_BASE64_ENCODED_IMAGE . It's the image that shows up for the product. We use base64 encoded images instead of PNG files. To get your own base64 version of your product image, you can use an online tool for that. We personally like to use this tool . Once you get the base64 encoded image from the tool, simply replace the PRODUCT_BASE64_ENCODED_IMAGE placeholder with it. Finally, let's map the product to the sales channel and the kiosk 1 2 3 4 INSERT INTO ` product_mrp ` ( ` id ` , ` kiosk_id ` , ` product_id ` , ` sales_channel_id ` , ` price_amount ` , ` price_currency ` , ` cogs_amount ` ) VALUES ( 1 , 1 , 1 , 1 , '4000.00' , 'UGX' , '2000.00' ); INSERT INTO ` product_mrp ` ( ` id ` , ` kiosk_id ` , ` product_id ` , ` sales_channel_id ` , ` price_amount ` , ` price_currency ` , ` cogs_amount ` ) VALUES ( 2 , 1 , 1 , 2 , '4000.00' , 'UGX' , '2000.00' ); Your database is now ready. To learn more about the database schema, please click here . The REST API Server \u00b6 Let's move on to the REST API. Prerequisites 2 \u00b6 From this point of this tutorial, here's what you'll need to follow along: Create a new root directory to contain the whole project: mkdir sema Move into the root directory: cd sema Create a new repository by forking the official REST API repo through Github: Follow this link for instructions. Link to the repo: https://github.com/untapped-inc/sema-core Clone your new repository to a local directory: git clone https://github.com/YOUR-USERNAME/sema-core.git - Make sure to change YOUR-USERNAME to your Github username or the one you chose to fork the repo for Move into the root directory of the REST API: cd sema-core From this point on, we expect that you are in the root directory of the REST API Configurations \u00b6 Before you can start running the server, you will need to first set the property values in the configurations file. This configurations file is located in the root directory of the REST API as .example-env . It's a dot file, so if you want to see it from your terminal, you need to add the -a flag to your ls: ls -a . First, rename this file from .example-env to .env : cp .example-env .env Then move it to the parent directory (which should be sema if you were following along): mv .env ../.env Now open this .env file using your favorite text editor. These properties provide the necessary details for the clients and the server to access the database and setup a few dependencies. Use the DB credentials you created while installing and setting up MySQL. Property Name Description DB_HOST The URL to the database server location E.g. localhost DB_USER The user who has access to this database E.g. untapped DB_PASSWORD The user password for this database E.g. semaIsAwesome 2 DB_SCHEMA The actual name of the database/schema E.g. sema_core DB_DIALECT The SQL dialect used by the DB. E.g. mysql . DEFAULT_TABLES The tables that must be populated - postinstall - by sequelize-auto by default E.g. user,role,user_role . We recommend you keep it to the default value. JWT_SECRET JSON Web Token secret used to encrypt the token. E.g. f8d74387h8undgs87 . Don't use this example, type in anything in there to make it hard to guess, this is some kind of password that will be used between the clients and the server. JWT_EXPIRATION_LENGTH Length of time the token is valid for. E.g. 1 day BCRYPT_SALT_ROUNDS How much time is needed to calculate a single BCrypt hash - Between 8 and 12 is recommended. Used for encrypting passwords for users. Remember, changing this requires that you use the same salt rounds value when creating a new password on the user table. E.g. 10 Danger We Strongly recommend that you do not to push the .env file to your repository after adding the correct configuration property values. For security measures, we added it to the project's .gitignore file so that git can always ignore it. So you would need to really want to push it to be able to do so. Running the server \u00b6 Now that your database and your configurations are all set. Let's run the server, shall we? Install dependencies: yarn Run the server: yarn start It should start running at http://localhost:3001 Let's test that it's running fine with curl: 1 curl http://localhost:3001/sema/health-check It should return something like: {\"server\":\"Ok\",\"database\":\"Ok\",\"version\":\"0.0.1.4\",\"schema\":\"sema_core\"} The version number may vary. Note The clients are configured to access the server on port 3001. To learn more about the REST API server, please click here . The Back Office Web Client \u00b6 Time to run the back office. Prerequisites 3 \u00b6 From this point of this tutorial, here's what you'll need to follow along: Assuming you are currently in the sema-core directory, move back into the root directory: cd .. Create a new repository by forking the official back office web client repo through Github: Follow this link for instructions. Link to the repo: https://github.com/untapped-inc/sema-back-office-web Clone your new repository to a local directory: git clone https://github.com/YOUR-USERNAME/sema-back-office-web.git - Make sure to change YOUR-USERNAME to your Github username or the one you chose to fork the repo for Move into the root directory of the back office web client: cd sema-back-office-web Install react-scripts (To be able to run the client): yarn global add react-scripts From this point on, we expect that you are in the root directory of the back office web client Running the Back Office Web Client \u00b6 Now it's time to run the back office client. Here are the steps to follow: Install dependencies: yarn Run the client: yarn start It should start running at http://localhost:3000 Notice the port number: 3000 Go to the above link and test the client by logging in with the user credentials you created during the database setup . To learn more about the back office, please click here . The POS Mobile Client \u00b6 Finally, let's run the POS client. Prerequisites 4 \u00b6 From this point of this tutorial, here's what you'll need to follow along: Assuming you are currently in the sema-back-office-web directory, move back into the root directory: cd .. Create a new repository by forking the official POS mobile client repo through Github: Follow this link for instructions. Link to the repo: https://github.com/untapped-inc/sema-pos-mobile Clone your new repository to a local directory: git clone https://github.com/YOUR-USERNAME/sema-pos-mobile.git - Make sure to change YOUR-USERNAME to your Github username or the one you chose to fork the repo for Move into the root directory of the POS mobile client: cd sema-pos-mobile From this point on, we expect that you are in the root directory of the POS mobile client Running the POS mobile client \u00b6 Follow the Android setup steps at the official react native docs . Make sure you select the appropriate tabs in the instructions. \"Building Projects with Native Code\" \"Development OS: macOS or Windows or Linux. Target OS: Android\" Install dependencies: yarn Create and open an emulator either by using Genymotion or the Android Studio AVD Use at least a 7 inch tablet with a minimum Android version of 6.0.0 Start the app on the emulator: react-native run-android You should get the Settings page. From there, fill up the form to make the connection between the mobile client and the server: Settings Field Description SEMA Service URL The URL to the running server. Since we're on local, we just need to get the current IP address of our system using ifconfig . E.g.: http://192.168.1.7:3001. Notice the port number of the server at the end. Site The kiosk that we created during database setup . E.g.: Bois9 Username or Email This is the user we just used to login to the dashboard client. E.g. Administrator Password The password of the above user E.g. diueh89ndys Then choose a language and press the Connect button. It should connect successfully and you will be able to test the whole app. Where to go from here? \u00b6 And that's it folks. You now have the whole platform running successfully on your own computer for testing and/or development purposes. Here are some useful links to go to from here: Deploying to Production Feel free to leave a comment down below for questions and clarifications. No hard feelings Windows users but your system is a pain for developers \u21a9 Hopefully you didn't use this password while setting up MySQL. But we won't judge you if you did ;) \u21a9 Don't tell anyone we told you that! Seriously though, if it's on a personal computer and not a server, it's fine. \u21a9","title":"Getting Started"},{"location":"getting-started/#getting-started-running-it-locally","text":"This section is a tutorial on how to get you started with setting up the platform on your system locally so you can test it. Windows Users We only cover *nix systems like Linux and OS X for now . Windows users will need to figure out alternatives on their own. 1","title":"Getting Started Running it locally"},{"location":"getting-started/#the-database","text":"Let's get started with the database.","title":"The Database"},{"location":"getting-started/#prerequisites-1","text":"From this point of this tutorial, here's what you'll need to follow along: Install MySQL: Follow this link for instructions for your system. Make sure you create an admin user, or using root is fine too. 3 Install nvm: Follow this link for instructions. Install latest LTS version of Node and npm: nvm install --lts Install Yarn: npm i -g yarn","title":"Prerequisites 1"},{"location":"getting-started/#configurations","text":"Assuming you've successfully installed MySQL on your system and created an admin user (not root ), let's start creating the sema_core database and populating the basic data for the project.","title":"Configurations"},{"location":"getting-started/#creating-the-database","text":"Here are the steps to follow: Open your MySQL Workbench Go to File > Open SQL Script... Find your repository folder and choose the file database > create_schema.sql Go to Query > Execute (All or Selection). It will run the script and create your new database This will create a new database named sema_core . If you want to rename it, either use a tool like MySQL Workbench or make sure you edit the create_schema.sql file fromt this line: CREATE SCHEMA sema_core; before you Execute it.","title":"Creating the database"},{"location":"getting-started/#populating-the-required-tables","text":"Now that the database is created, let's populate some tables in there. Feel free to change the values to what you want, except where it's mentioned to keep them as is. Let's start by populating the MySQL views necessary: Still in MySQL Workbench, using the same steps above, select the customer_details_view.sql located in the database folder and run it. Then do the same for the receipt_details_view.sql file. Let's add a role 1 2 INSERT INTO ` role ` ( ` id ` , ` authority ` , ` code ` ) VALUES ( 1 , 'Admin' , 'admin' ); Then the user: 1 2 INSERT INTO ` user ` ( ` id ` , ` username ` , ` email ` , ` password ` , ` first_name ` , ` last_name ` ) VALUES ( 1 , 'administrator' , 'admin@untapped-inc.com' , 'USER_PASSWORD' , 'Admin' , 'User' ); Note Notice the USER_PASSWORD placeholder for this user. Here's how to get it: First, install the bcrypt-cli npm package globally: yarn global add bcrypt-cli Then run the following command to get the encrypted password: bcrypt-cli \"AdminPassword\" 10 Replace AdminPassword with the one you want and keep the last value to 10. This is the bcrypt salt round, you'll know why we use it in the Configurations sub-section. Then use this encrypted password for this customer. Repeat the last step for subsequent ones. Let's now map the user to the role 1 INSERT INTO ` user_role ` ( ` role_id ` , ` user_id ` ) VALUES ( 1 , 1 ); Now, time to add a country: 1 2 INSERT INTO ` country ` ( ` id ` , ` name ` ) VALUES ( 1 , 'Haiti' ); Now, let's add a region: 1 2 INSERT INTO ` region ` ( ` id ` , ` name ` , ` description ` , ` country_id ` ) VALUES ( 1 , 'Ouest' , 'On the West side' , 1 ); Next, add a kiosk/site: 1 2 INSERT INTO ` kiosk ` ( ` id ` , ` name ` , ` region_id ` ) VALUES ( 1 , 'Bois9' , 1 ); Now, add a few customer types: 1 2 3 4 INSERT INTO ` customer_type ` ( ` id ` , ` name ` ) VALUES ( 1 , 'anonymous' ); INSERT INTO ` customer_type ` ( ` id ` , ` name ` ) VALUES ( 2 , 'Small Store' ); Note The anonymous type is required. Do not change it. Now for the sales channels: 1 2 3 4 INSERT INTO ` sales_channel ` ( ` id ` , ` name ` , ` description ` ) VALUES ( 1 , 'reseller' , 'Resellers' ); INSERT INTO ` sales_channel ` ( ` id ` , ` name ` , ` description ` ) VALUES ( 2 , 'direct' , 'Customers that walk up to the kiosk' ); Next, add a couple of customers: 1 2 3 4 INSERT INTO ` customer_account ` ( ` id ` , ` name ` , ` customer_type_id ` , ` sales_channel_id ` , ` kiosk_id ` , ` address_line1 ` , ` gps_coordinates ` , ` phone_number ` ) VALUES ( 'CUSTOMER_UUID' , 'Direct Client' , 2 , 2 , 1 , '--------------------' , 'gps' , '---------------------' ); INSERT INTO ` customer_account ` ( ` id ` , ` name ` , ` customer_type_id ` , ` sales_channel_id ` , ` kiosk_id ` , ` address_line1 ` , ` phone_number ` ) VALUES ( 'CUSTOMER_UUID' , 'Chez Matilda' , 1 , 1 , 1 , '25, rue Fernand' , '+50937120500' ); Info Notice the CUSTOMER_UUID placeholder value for those customers. Here's how to get them: First, install the uuid npm package globally: yarn global add uuid Then simply run uuid to generate a uuid in your terminal: uuid Then use this uuid for one customer by replacing the CUSTOMER_UUID placeholder with it. Repeat the last two steps for subsequent ones. Now it's time to add some product categories: 1 2 INSERT INTO ` product_category ` ( ` id ` , ` description ` , ` name ` ) VALUES ( 1 , 'Water products' , 'water_products' ); Then add a product 1 2 INSERT INTO ` product ` ( ` id ` , ` name ` , ` sku ` , ` description ` , ` category_id ` , ` price_amount ` , ` price_currency ` , ` unit_per_product ` , ` unit_measure ` , ` cogs_amount ` , ` base64encoded_image ` ) VALUES ( 1 , '5.0L bottle' , 'MD5G' , '5 Liter water bottle' , 1 , 4000 . 00 , 'UGX' , 5 , 'liters' , 2000 . 00 , 'PRODUCT_BASE64_ENCODED_IMAGE' ); Note As of now, you must have at least one product with a unit_measure value of liters . Notice the PRODUCT_BASE64_ENCODED_IMAGE . It's the image that shows up for the product. We use base64 encoded images instead of PNG files. To get your own base64 version of your product image, you can use an online tool for that. We personally like to use this tool . Once you get the base64 encoded image from the tool, simply replace the PRODUCT_BASE64_ENCODED_IMAGE placeholder with it. Finally, let's map the product to the sales channel and the kiosk 1 2 3 4 INSERT INTO ` product_mrp ` ( ` id ` , ` kiosk_id ` , ` product_id ` , ` sales_channel_id ` , ` price_amount ` , ` price_currency ` , ` cogs_amount ` ) VALUES ( 1 , 1 , 1 , 1 , '4000.00' , 'UGX' , '2000.00' ); INSERT INTO ` product_mrp ` ( ` id ` , ` kiosk_id ` , ` product_id ` , ` sales_channel_id ` , ` price_amount ` , ` price_currency ` , ` cogs_amount ` ) VALUES ( 2 , 1 , 1 , 2 , '4000.00' , 'UGX' , '2000.00' ); Your database is now ready. To learn more about the database schema, please click here .","title":"Populating the required tables"},{"location":"getting-started/#the-rest-api-server","text":"Let's move on to the REST API.","title":"The REST API Server"},{"location":"getting-started/#prerequisites-2","text":"From this point of this tutorial, here's what you'll need to follow along: Create a new root directory to contain the whole project: mkdir sema Move into the root directory: cd sema Create a new repository by forking the official REST API repo through Github: Follow this link for instructions. Link to the repo: https://github.com/untapped-inc/sema-core Clone your new repository to a local directory: git clone https://github.com/YOUR-USERNAME/sema-core.git - Make sure to change YOUR-USERNAME to your Github username or the one you chose to fork the repo for Move into the root directory of the REST API: cd sema-core From this point on, we expect that you are in the root directory of the REST API","title":"Prerequisites 2"},{"location":"getting-started/#configurations_1","text":"Before you can start running the server, you will need to first set the property values in the configurations file. This configurations file is located in the root directory of the REST API as .example-env . It's a dot file, so if you want to see it from your terminal, you need to add the -a flag to your ls: ls -a . First, rename this file from .example-env to .env : cp .example-env .env Then move it to the parent directory (which should be sema if you were following along): mv .env ../.env Now open this .env file using your favorite text editor. These properties provide the necessary details for the clients and the server to access the database and setup a few dependencies. Use the DB credentials you created while installing and setting up MySQL. Property Name Description DB_HOST The URL to the database server location E.g. localhost DB_USER The user who has access to this database E.g. untapped DB_PASSWORD The user password for this database E.g. semaIsAwesome 2 DB_SCHEMA The actual name of the database/schema E.g. sema_core DB_DIALECT The SQL dialect used by the DB. E.g. mysql . DEFAULT_TABLES The tables that must be populated - postinstall - by sequelize-auto by default E.g. user,role,user_role . We recommend you keep it to the default value. JWT_SECRET JSON Web Token secret used to encrypt the token. E.g. f8d74387h8undgs87 . Don't use this example, type in anything in there to make it hard to guess, this is some kind of password that will be used between the clients and the server. JWT_EXPIRATION_LENGTH Length of time the token is valid for. E.g. 1 day BCRYPT_SALT_ROUNDS How much time is needed to calculate a single BCrypt hash - Between 8 and 12 is recommended. Used for encrypting passwords for users. Remember, changing this requires that you use the same salt rounds value when creating a new password on the user table. E.g. 10 Danger We Strongly recommend that you do not to push the .env file to your repository after adding the correct configuration property values. For security measures, we added it to the project's .gitignore file so that git can always ignore it. So you would need to really want to push it to be able to do so.","title":"Configurations"},{"location":"getting-started/#running-the-server","text":"Now that your database and your configurations are all set. Let's run the server, shall we? Install dependencies: yarn Run the server: yarn start It should start running at http://localhost:3001 Let's test that it's running fine with curl: 1 curl http://localhost:3001/sema/health-check It should return something like: {\"server\":\"Ok\",\"database\":\"Ok\",\"version\":\"0.0.1.4\",\"schema\":\"sema_core\"} The version number may vary. Note The clients are configured to access the server on port 3001. To learn more about the REST API server, please click here .","title":"Running the server"},{"location":"getting-started/#the-back-office-web-client","text":"Time to run the back office.","title":"The Back Office Web Client"},{"location":"getting-started/#prerequisites-3","text":"From this point of this tutorial, here's what you'll need to follow along: Assuming you are currently in the sema-core directory, move back into the root directory: cd .. Create a new repository by forking the official back office web client repo through Github: Follow this link for instructions. Link to the repo: https://github.com/untapped-inc/sema-back-office-web Clone your new repository to a local directory: git clone https://github.com/YOUR-USERNAME/sema-back-office-web.git - Make sure to change YOUR-USERNAME to your Github username or the one you chose to fork the repo for Move into the root directory of the back office web client: cd sema-back-office-web Install react-scripts (To be able to run the client): yarn global add react-scripts From this point on, we expect that you are in the root directory of the back office web client","title":"Prerequisites 3"},{"location":"getting-started/#running-the-back-office-web-client","text":"Now it's time to run the back office client. Here are the steps to follow: Install dependencies: yarn Run the client: yarn start It should start running at http://localhost:3000 Notice the port number: 3000 Go to the above link and test the client by logging in with the user credentials you created during the database setup . To learn more about the back office, please click here .","title":"Running the Back Office Web Client"},{"location":"getting-started/#the-pos-mobile-client","text":"Finally, let's run the POS client.","title":"The POS Mobile Client"},{"location":"getting-started/#prerequisites-4","text":"From this point of this tutorial, here's what you'll need to follow along: Assuming you are currently in the sema-back-office-web directory, move back into the root directory: cd .. Create a new repository by forking the official POS mobile client repo through Github: Follow this link for instructions. Link to the repo: https://github.com/untapped-inc/sema-pos-mobile Clone your new repository to a local directory: git clone https://github.com/YOUR-USERNAME/sema-pos-mobile.git - Make sure to change YOUR-USERNAME to your Github username or the one you chose to fork the repo for Move into the root directory of the POS mobile client: cd sema-pos-mobile From this point on, we expect that you are in the root directory of the POS mobile client","title":"Prerequisites 4"},{"location":"getting-started/#running-the-pos-mobile-client","text":"Follow the Android setup steps at the official react native docs . Make sure you select the appropriate tabs in the instructions. \"Building Projects with Native Code\" \"Development OS: macOS or Windows or Linux. Target OS: Android\" Install dependencies: yarn Create and open an emulator either by using Genymotion or the Android Studio AVD Use at least a 7 inch tablet with a minimum Android version of 6.0.0 Start the app on the emulator: react-native run-android You should get the Settings page. From there, fill up the form to make the connection between the mobile client and the server: Settings Field Description SEMA Service URL The URL to the running server. Since we're on local, we just need to get the current IP address of our system using ifconfig . E.g.: http://192.168.1.7:3001. Notice the port number of the server at the end. Site The kiosk that we created during database setup . E.g.: Bois9 Username or Email This is the user we just used to login to the dashboard client. E.g. Administrator Password The password of the above user E.g. diueh89ndys Then choose a language and press the Connect button. It should connect successfully and you will be able to test the whole app.","title":"Running the POS mobile client"},{"location":"getting-started/#where-to-go-from-here","text":"And that's it folks. You now have the whole platform running successfully on your own computer for testing and/or development purposes. Here are some useful links to go to from here: Deploying to Production Feel free to leave a comment down below for questions and clarifications. No hard feelings Windows users but your system is a pain for developers \u21a9 Hopefully you didn't use this password while setting up MySQL. But we won't judge you if you did ;) \u21a9 Don't tell anyone we told you that! Seriously though, if it's on a personal computer and not a server, it's fine. \u21a9","title":"Where to go from here?"},{"location":"license/","text":"License \u00b6 MIT License Copyright \u00a9 2018 Untapped, Inc. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright \u00a9 2018 Untapped, Inc. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"staying-in-harmony/","text":"Staying in harmony Let's not walk over each other \u00b6 This section is for those who decide to customize their version of SEMA but still want to receive particular updates from one of our repositories without losing their changes in the long run. This section assumes you already have a version of SEMA running in development mode and one running in production mode . We'll also assume that: You've FORKED the main repo You've Customized your POS app by changing the name, the logos, etc... You've added your own features to one or more parts of the system It's all fun and games, until you notice, from one of our release notes, that we added a new feature that you like. What do you do now? Your first guess would be to use git pull upstream master , but that's going to blow up your old changes and will annoy you with conflicts that don't even relate to the commit(s) that implement(s) the stuff(s) you like. Keep reading if you want to selectively merge modifications/updates from our repos to yours. Note We will be using the POS mobile client repo for this tutorial. However, the instructions apply to all of our repos. Fetch from upstream remote \u00b6 To get started, you'll want to make sure you keep your fork up to date by tracking the official \"upstream\" repo that you forked. To do this, you'll need to add a remote: 1 git remote add upstream https://github.com/untapped-inc/sema-pos-mobile.git Verify the new remote named 'upstream' 1 git remote -v Whenever you want to update your fork with the latest upstream changes, you'll need to first fetch the upstream repo's branches and latest commits to bring them into your repository: 1 git fetch -v upstream -v makes sure it outputs the fetched branches (verbose). Checkout your master branch and merge upstream \u00b6 Now, checkout your own master branch and squash and merge the upstream repo's master branch. We're merging the master branch here because this is the branch that Untapped releases latest features on. You could have used another one for your own purposes: 1 git checkout master 1 git merge --squash upstream/master If there are no unique commits on the local master branch, git will simply perform a fast-forward. However, if you have been making changes on master - or already merged another branch, you may have to deal with conflicts. When doing so, either through a graphical user interface or the command line, make sure to pick the right modification source for the conflict: Ours / HEAD - your changes Theirs / Incoming Changes - the changes from Untapped Then you can stage the changes and make a single commit to complete the merge: 1 git add . 1 git commit -m \"Merge this awesome feature from Untapped\" Now, your local master branch is up-to-date with what you needed from upstream while retaining your own changes. Feel free to leave a comment down below.","title":"Keeping your fork up to date"},{"location":"staying-in-harmony/#staying-in-harmony-lets-not-walk-over-each-other","text":"This section is for those who decide to customize their version of SEMA but still want to receive particular updates from one of our repositories without losing their changes in the long run. This section assumes you already have a version of SEMA running in development mode and one running in production mode . We'll also assume that: You've FORKED the main repo You've Customized your POS app by changing the name, the logos, etc... You've added your own features to one or more parts of the system It's all fun and games, until you notice, from one of our release notes, that we added a new feature that you like. What do you do now? Your first guess would be to use git pull upstream master , but that's going to blow up your old changes and will annoy you with conflicts that don't even relate to the commit(s) that implement(s) the stuff(s) you like. Keep reading if you want to selectively merge modifications/updates from our repos to yours. Note We will be using the POS mobile client repo for this tutorial. However, the instructions apply to all of our repos.","title":"Staying in harmony Let's not walk over each other"},{"location":"staying-in-harmony/#fetch-from-upstream-remote","text":"To get started, you'll want to make sure you keep your fork up to date by tracking the official \"upstream\" repo that you forked. To do this, you'll need to add a remote: 1 git remote add upstream https://github.com/untapped-inc/sema-pos-mobile.git Verify the new remote named 'upstream' 1 git remote -v Whenever you want to update your fork with the latest upstream changes, you'll need to first fetch the upstream repo's branches and latest commits to bring them into your repository: 1 git fetch -v upstream -v makes sure it outputs the fetched branches (verbose).","title":"Fetch from upstream remote"},{"location":"staying-in-harmony/#checkout-your-master-branch-and-merge-upstream","text":"Now, checkout your own master branch and squash and merge the upstream repo's master branch. We're merging the master branch here because this is the branch that Untapped releases latest features on. You could have used another one for your own purposes: 1 git checkout master 1 git merge --squash upstream/master If there are no unique commits on the local master branch, git will simply perform a fast-forward. However, if you have been making changes on master - or already merged another branch, you may have to deal with conflicts. When doing so, either through a graphical user interface or the command line, make sure to pick the right modification source for the conflict: Ours / HEAD - your changes Theirs / Incoming Changes - the changes from Untapped Then you can stage the changes and make a single commit to complete the merge: 1 git add . 1 git commit -m \"Merge this awesome feature from Untapped\" Now, your local master branch is up-to-date with what you needed from upstream while retaining your own changes. Feel free to leave a comment down below.","title":"Checkout your master branch and merge upstream"},{"location":"the-database-schema/","text":"The Database Schema \u00b6 The data structure is designed to incorporate the unique business practices of various safe water enterprises. The structure is broad enough to serve the entire SWE sector, yet allows for customization to serve the unique business practices of each SWE. We decided to document the database on a different page because we're using a software called SchemaSpy . SchemaSpy allows us to provide more technical details about the database - i.e.: Constraints, relationships, etc... Click here to visit the database documentation. SchemaSpy uses the MySQL comments to add details to each table and their columns. In the future, we will also add sub-sections to this section for each table so we can provide even more in-depth info about each table, their columns and their purpose. If you see a bug on that page or any missing details, please, feel free to leave a comment down below.","title":"The Database Schema"},{"location":"the-database-schema/#the-database-schema","text":"The data structure is designed to incorporate the unique business practices of various safe water enterprises. The structure is broad enough to serve the entire SWE sector, yet allows for customization to serve the unique business practices of each SWE. We decided to document the database on a different page because we're using a software called SchemaSpy . SchemaSpy allows us to provide more technical details about the database - i.e.: Constraints, relationships, etc... Click here to visit the database documentation. SchemaSpy uses the MySQL comments to add details to each table and their columns. In the future, we will also add sub-sections to this section for each table so we can provide even more in-depth info about each table, their columns and their purpose. If you see a bug on that page or any missing details, please, feel free to leave a comment down below.","title":"The Database Schema"},{"location":"back-office/demographics/","text":"The Demographics page shows information on active customers filtered by date. When the date filter chosen is \"Total\" the count of all active customers created that meet the various criteria are shown. When a date range is specified, the count of all all active customers created during the date range are shown. Number of Active Customers and Consumer Penetration \u00b6 Example: A Site contains a total of 45 customers, 40 of which are active and these customers have a total consumer base of 859. The Site has an estimated potential consumer base of 2000 consumers Demographics will show a total of 40 customers for 'total' date range with a Consumer Penetration rate of 43% (859/2000 *100) For the month June, 2018, 9 customers with a potential consumer base of 263 consumers were created. This results in a Consumer Penetration rate for that month of 13% (263/2000 *100) The requirements for accurate \"Consumer Penetration\" are that database kiosk.consumer_base and customer_account.consumer_base be populated. The service endpoint for Number of Active Customers and Consumer Penetration is /sema/dashboard/site/customer-summary Customers by By Distance \u00b6 Customers by distance shows a pie chart of customers as a function of distance from the kiosk. The requirements for accurate \"Customers by distance\" is that customer_account.distance be populated. The service endpoint is /sema/dashboard/site/customer-summary Customers by By Income level \u00b6 Customers by income level shows a pie chart of customers as a function of income level. The requirements for accurate \"Customers by income level \" is that customer_account.income_level be populated. The service endpoint is /sema/dashboard/site/customer-summary Customers by By Gender \u00b6 Customers by gender shows a pie chart of customers as a function of gender. The requirements for accurate \"Customers by income level \" is that customer_account.gender be populated, ('M' or 'F') The service endpoint is /sema/dashboard/site/customer-summary","title":"Demographics"},{"location":"back-office/demographics/#number-of-active-customers-and-consumer-penetration","text":"Example: A Site contains a total of 45 customers, 40 of which are active and these customers have a total consumer base of 859. The Site has an estimated potential consumer base of 2000 consumers Demographics will show a total of 40 customers for 'total' date range with a Consumer Penetration rate of 43% (859/2000 *100) For the month June, 2018, 9 customers with a potential consumer base of 263 consumers were created. This results in a Consumer Penetration rate for that month of 13% (263/2000 *100) The requirements for accurate \"Consumer Penetration\" are that database kiosk.consumer_base and customer_account.consumer_base be populated. The service endpoint for Number of Active Customers and Consumer Penetration is /sema/dashboard/site/customer-summary","title":"Number of Active Customers and Consumer Penetration"},{"location":"back-office/demographics/#customers-by-by-distance","text":"Customers by distance shows a pie chart of customers as a function of distance from the kiosk. The requirements for accurate \"Customers by distance\" is that customer_account.distance be populated. The service endpoint is /sema/dashboard/site/customer-summary","title":"Customers by By Distance"},{"location":"back-office/demographics/#customers-by-by-income-level","text":"Customers by income level shows a pie chart of customers as a function of income level. The requirements for accurate \"Customers by income level \" is that customer_account.income_level be populated. The service endpoint is /sema/dashboard/site/customer-summary","title":"Customers by By Income level"},{"location":"back-office/demographics/#customers-by-by-gender","text":"Customers by gender shows a pie chart of customers as a function of gender. The requirements for accurate \"Customers by income level \" is that customer_account.gender be populated, ('M' or 'F') The service endpoint is /sema/dashboard/site/customer-summary","title":"Customers by By Gender"},{"location":"back-office/overview/","text":"The Dashboard Client \u00b6 The report client application is a React Browser application. It displays various metrics related to water production, sales and customer demographics. The report client uses MVC pattern, the model is maintained in a Redux store, the views are implemented using React Components and the Sema REST services are used to load the Model Store A picture of the report client is shown below: Components \u00b6 The report_client application consists of three main 'panes', the navigation pane, the toolbar pane and the main content pane. The React root component App initializes the application and presents either a login page, SemaLogin, (if a user login is required), or SemaContainer component which hosts, SemaSidebar , SemaToolbar and SemaMain , ( the navigation pane, toolbar pane and main content pane content respectively) Navigation Pane, (SemaSidebar) \u00b6 This React component controls the content of the main view. It also contains a vendor specific logo at the top. Toolbar Pane (SemaToolbar) \u00b6 This react component contains, (in left to right order); The version information of the client application, a 'Site/Kiosk' selector, a Date 'filter' selector, the name of the logged in user, a logout button and the version of the Sema service. When the application first starts, the user must first select a Site/Kiosk in order to populate the main content Main Pane (SemaMain) \u00b6 This contains the routing information for the various 'content' components. The root components for each content page are SemaWaterOperations - The root component for \"Water Operations\" SemaSales - The root component for \"Sales\" SemaVolume - The root component for \"Volumes\" SemaCustomer - The root component for customer \"Demographics\" The sections that follow describe these root components in more detail","title":"The Dashboard Client"},{"location":"back-office/overview/#the-dashboard-client","text":"The report client application is a React Browser application. It displays various metrics related to water production, sales and customer demographics. The report client uses MVC pattern, the model is maintained in a Redux store, the views are implemented using React Components and the Sema REST services are used to load the Model Store A picture of the report client is shown below:","title":"The Dashboard Client"},{"location":"back-office/overview/#components","text":"The report_client application consists of three main 'panes', the navigation pane, the toolbar pane and the main content pane. The React root component App initializes the application and presents either a login page, SemaLogin, (if a user login is required), or SemaContainer component which hosts, SemaSidebar , SemaToolbar and SemaMain , ( the navigation pane, toolbar pane and main content pane content respectively)","title":"Components"},{"location":"back-office/overview/#navigation-pane-semasidebar","text":"This React component controls the content of the main view. It also contains a vendor specific logo at the top.","title":"Navigation Pane, (SemaSidebar)"},{"location":"back-office/overview/#toolbar-pane-sematoolbar","text":"This react component contains, (in left to right order); The version information of the client application, a 'Site/Kiosk' selector, a Date 'filter' selector, the name of the logged in user, a logout button and the version of the Sema service. When the application first starts, the user must first select a Site/Kiosk in order to populate the main content","title":"Toolbar Pane (SemaToolbar)"},{"location":"back-office/overview/#main-pane-semamain","text":"This contains the routing information for the various 'content' components. The root components for each content page are SemaWaterOperations - The root component for \"Water Operations\" SemaSales - The root component for \"Sales\" SemaVolume - The root component for \"Volumes\" SemaCustomer - The root component for customer \"Demographics\" The sections that follow describe these root components in more detail","title":"Main Pane (SemaMain)"},{"location":"back-office/redux/","text":"The report client application uses React Redux to save the results of SEMA REST API requests to the Redux store. Components that need the various model properties then bind to those properties. The flow of a user interaction that results in new data being fetched from the SEMA service followed by a component update is shown below. The example illustrates the flow after a user selects a different kiosk/site while the application is displaying the Water Operations content.","title":"Redux"},{"location":"back-office/sales/","text":"The Sales page shows sales information filtered by date. When the date filter chosen is \"Total\", the total metrics of water sold that meet the various criteria is shown. When a date range is specified, the water sales for the date filter period is shown. Total Customers \u00b6 Shows the total customers for the site plus the change in customers since the previous period. For example if there are 40 total customers, 9 created for May 2018 and 4 customers created in April 2018, this show as \" 40 Total Customers, 125% since April, 2018 \" The service endpoint is /sema/dashboard/site/sales-summary Total Revenue \u00b6 Shows total revenue plus the change in revenue for the for the current period since the last period. The service endpoint is /sema/dashboard/site/sales-summary Gross Margin \u00b6 Gross Margin is calculated as total revenue - cost of goods sold. Both total Gross Margin and change in Gross Margin since the previous period are shown The requirements for Gross Margin is that, receipt.cogs is populated. The service endpoint is /sema/dashboard/site/sales-summary Customer Location \u00b6 The customer location map shows the geographic location of customers. The requirement for geographic locations is that customer_account.gps_coordinates be populated. Customers whose sales increased over the previous period are shown in green, while customers whose sales decreased over the previous period are shown in red. Larger circles correspond to larger gains/losses The service endpoint is /sema/dashboard/site/sales-summary Customer Sales List \u00b6 The customer sales list shows customers, by sales revenue in descending order. Green indicates a gain, while red indicates a loss since the previous period. The 'trend' column indicates if sales increased or decreased since the previous period. The service endpoint is /sema/dashboard/site/sales-summary Revenue/Customer \u00b6 Shows the Revenue/Customer for the current period. Revenue/Sales Channel \u00b6 Shows a pie chart of revenue by sales channel for the period The service endpoint is /sema/dashboard/site/receipt-summary","title":"Sales"},{"location":"back-office/sales/#total-customers","text":"Shows the total customers for the site plus the change in customers since the previous period. For example if there are 40 total customers, 9 created for May 2018 and 4 customers created in April 2018, this show as \" 40 Total Customers, 125% since April, 2018 \" The service endpoint is /sema/dashboard/site/sales-summary","title":"Total Customers"},{"location":"back-office/sales/#total-revenue","text":"Shows total revenue plus the change in revenue for the for the current period since the last period. The service endpoint is /sema/dashboard/site/sales-summary","title":"Total Revenue"},{"location":"back-office/sales/#gross-margin","text":"Gross Margin is calculated as total revenue - cost of goods sold. Both total Gross Margin and change in Gross Margin since the previous period are shown The requirements for Gross Margin is that, receipt.cogs is populated. The service endpoint is /sema/dashboard/site/sales-summary","title":"Gross Margin"},{"location":"back-office/sales/#customer-location","text":"The customer location map shows the geographic location of customers. The requirement for geographic locations is that customer_account.gps_coordinates be populated. Customers whose sales increased over the previous period are shown in green, while customers whose sales decreased over the previous period are shown in red. Larger circles correspond to larger gains/losses The service endpoint is /sema/dashboard/site/sales-summary","title":"Customer Location"},{"location":"back-office/sales/#customer-sales-list","text":"The customer sales list shows customers, by sales revenue in descending order. Green indicates a gain, while red indicates a loss since the previous period. The 'trend' column indicates if sales increased or decreased since the previous period. The service endpoint is /sema/dashboard/site/sales-summary","title":"Customer Sales List"},{"location":"back-office/sales/#revenuecustomer","text":"Shows the Revenue/Customer for the current period.","title":"Revenue/Customer"},{"location":"back-office/sales/#revenuesales-channel","text":"Shows a pie chart of revenue by sales channel for the period The service endpoint is /sema/dashboard/site/receipt-summary","title":"Revenue/Sales Channel"},{"location":"back-office/volumes/","text":"The Volumes page shows information on water sales filtered by date. When the date filter chosen is \"Total\", the total volume of water sold that meet the various criteria is shown. When a date range is specified, the water sales and volumes for the date filter period is shown. Total Volume \u00b6 Example: A Site contains 181 receipts, with a water volume of 1603.4 liters. For the month June, 2018, 199.6 liters were sold The database requirements for water volume data are that, receipt_line_item.quantity and product.unit_per_product are populated. The service endpoint used is /sema/dashboard/site/receipt-summary Volume/Consumer \u00b6 Shows the volume sold per consumer. Note that this per consumer refers potential consumers that the kiosk services. The database requirements for water volume data are that, receipt_line_item.quantity and product.unit_per_product are and kiosk.consumer_base populated. The service endpoint used is /sema/dashboard/site/receipt-summary Average Purchase Frequency \u00b6 Shows the number of times over the period that customers purchase water. This is calculated as SUM( receipt.id )/SUM(Distinct r eceipt.customer_id ) The service endpoint used is /sema/dashboard/site/receipt-summary Volume/Purchase \u00b6 Shows the volume per purchase over the period This is calculated as SUM( receipt_line_item.quantity * product.unit_per_product )/SUM(Distinct r eceipt.id ) The service endpoint used is /sema/dashboard/site/receipt-summary Volume By Sales Channel \u00b6 Volume by channel shows a pie chart of volume sold via the different sales channels. The service endpoint used is /sema/dashboard/site/receipt-summary Volume By Sales Channel and Income level \u00b6 Volume by sales channel and income levels show horizontal bar charts for different income ranges where each bar displays the volumes sold via the various sales channels . The additional requirement is that customer_account.income_level be populated. The service endpoint used is /sema/dashboard/site/receipt-summary Volume By Sales Channel and Payment Type \u00b6 Volume by sales channel and payment types show horizontal bar charts for different payment types where each bar displays the volumes sold via the various sales channels . The additional requirements are that receipt.amount_cash, receipt.amount_loan , receipt.amount_mobile , receipt.amount_card be populated. The service endpoint used is /sema/dashboard/site/receipt-summary","title":"Volumes"},{"location":"back-office/volumes/#total-volume","text":"Example: A Site contains 181 receipts, with a water volume of 1603.4 liters. For the month June, 2018, 199.6 liters were sold The database requirements for water volume data are that, receipt_line_item.quantity and product.unit_per_product are populated. The service endpoint used is /sema/dashboard/site/receipt-summary","title":"Total Volume"},{"location":"back-office/volumes/#volumeconsumer","text":"Shows the volume sold per consumer. Note that this per consumer refers potential consumers that the kiosk services. The database requirements for water volume data are that, receipt_line_item.quantity and product.unit_per_product are and kiosk.consumer_base populated. The service endpoint used is /sema/dashboard/site/receipt-summary","title":"Volume/Consumer"},{"location":"back-office/volumes/#average-purchase-frequency","text":"Shows the number of times over the period that customers purchase water. This is calculated as SUM( receipt.id )/SUM(Distinct r eceipt.customer_id ) The service endpoint used is /sema/dashboard/site/receipt-summary","title":"Average Purchase Frequency"},{"location":"back-office/volumes/#volumepurchase","text":"Shows the volume per purchase over the period This is calculated as SUM( receipt_line_item.quantity * product.unit_per_product )/SUM(Distinct r eceipt.id ) The service endpoint used is /sema/dashboard/site/receipt-summary","title":"Volume/Purchase"},{"location":"back-office/volumes/#volume-by-sales-channel","text":"Volume by channel shows a pie chart of volume sold via the different sales channels. The service endpoint used is /sema/dashboard/site/receipt-summary","title":"Volume By Sales Channel"},{"location":"back-office/volumes/#volume-by-sales-channel-and-income-level","text":"Volume by sales channel and income levels show horizontal bar charts for different income ranges where each bar displays the volumes sold via the various sales channels . The additional requirement is that customer_account.income_level be populated. The service endpoint used is /sema/dashboard/site/receipt-summary","title":"Volume By Sales Channel and Income level"},{"location":"back-office/volumes/#volume-by-sales-channel-and-payment-type","text":"Volume by sales channel and payment types show horizontal bar charts for different payment types where each bar displays the volumes sold via the various sales channels . The additional requirements are that receipt.amount_cash, receipt.amount_loan , receipt.amount_mobile , receipt.amount_card be populated. The service endpoint used is /sema/dashboard/site/receipt-summary","title":"Volume By Sales Channel and Payment Type"},{"location":"back-office/water-operations/","text":"The Water Operations page shows information on water production, quality etc, filtered by date. When the date filter chosen is \"Total\", the total metrics of water operations is shown. When a date range is specified, the water operations for the date filter period is shown. Total Production \u00b6 Shows water production as \" 501759 liters, Wed Jan 31, 2018 \". If there is no Date filter, total water production up to the current date is displayed. Otherwise production for the period selected by the date filter is displayed. Water production is calculated from the \"Volume\" parameter at the sampling site \"B:Product:\" The service endpoint is /sema/dashboard/site/water-summary Total Wastage \u00b6 Shows the difference in water production at the source, (\"B:Product) and production at the \"Fill\" (D:Fill). The service endpoint is /sema/dashboard/site/water-summary Pressure \u00b6 Shows the average water pressure in different parts of the water production system for the selected period. Details TBD The service endpoint is /sema/dashboard/site/water-summary Flow Rate \u00b6 Shows average Product/Source and Distribution flow rates for the selected period. The service endpoint is /sema/dashboard/site/water-summary Production Chart \u00b6 Shows a bar chart of daily water production over the period. Note that daily production is calculated as the (maximum volume reading - minimum volume reading) per day The service endpoint is /sema/dashboard/site/water-chart Total Chlorine \u00b6 Shows a line chart of Total Chlorine levels over the period. The service endpoint is /sema/dashboard/site/water-chart Total Dissolved Solids \u00b6 Shows a line chart of Total Dissolved solids over the period The service endpoint is /sema/dashboard/site/water-chart","title":"Water operations"},{"location":"back-office/water-operations/#total-production","text":"Shows water production as \" 501759 liters, Wed Jan 31, 2018 \". If there is no Date filter, total water production up to the current date is displayed. Otherwise production for the period selected by the date filter is displayed. Water production is calculated from the \"Volume\" parameter at the sampling site \"B:Product:\" The service endpoint is /sema/dashboard/site/water-summary","title":"Total Production"},{"location":"back-office/water-operations/#total-wastage","text":"Shows the difference in water production at the source, (\"B:Product) and production at the \"Fill\" (D:Fill). The service endpoint is /sema/dashboard/site/water-summary","title":"Total Wastage"},{"location":"back-office/water-operations/#pressure","text":"Shows the average water pressure in different parts of the water production system for the selected period. Details TBD The service endpoint is /sema/dashboard/site/water-summary","title":"Pressure"},{"location":"back-office/water-operations/#flow-rate","text":"Shows average Product/Source and Distribution flow rates for the selected period. The service endpoint is /sema/dashboard/site/water-summary","title":"Flow Rate"},{"location":"back-office/water-operations/#production-chart","text":"Shows a bar chart of daily water production over the period. Note that daily production is calculated as the (maximum volume reading - minimum volume reading) per day The service endpoint is /sema/dashboard/site/water-chart","title":"Production Chart"},{"location":"back-office/water-operations/#total-chlorine","text":"Shows a line chart of Total Chlorine levels over the period. The service endpoint is /sema/dashboard/site/water-chart","title":"Total Chlorine"},{"location":"back-office/water-operations/#total-dissolved-solids","text":"Shows a line chart of Total Dissolved solids over the period The service endpoint is /sema/dashboard/site/water-chart","title":"Total Dissolved Solids"},{"location":"pos/overview/","text":"Components \u00b6 The POS mobile client is built upon multiple components. You will find a full list of components and APIs on the sidebar to the left. If you're not sure where to get started, take a look at the following categories: Basic Components Customer Components Order Components Report Components General Components \u00b6 Those components are the most used ones. They are used by most - if not all - other components. You'll want to get yourself familiarized with them all if you're new to this source code. Login A component for the login screen PosApp Settings Toolbar Customer Components \u00b6 Those components render common user interface controls relating to customers. CustomerBar CustomerBarButton CustomerEdit CustomerList CustomerViews Order Components \u00b6 Those components render common user interface controls relating to orders and payments. OrderCheckout OrderItems OrderPaymentScreen OrderProductScreen OrderResellerScreen OrderSummary OrderSummaryScreen OrderTotal OrderView OrderWalkupScreen ProductList Report Components \u00b6 Those components render common user interface controls relating to reports. DashboardReport DateFilter InventoryReport SalesReport Sidebar SiteReport","title":"Overview"},{"location":"pos/overview/#components","text":"The POS mobile client is built upon multiple components. You will find a full list of components and APIs on the sidebar to the left. If you're not sure where to get started, take a look at the following categories: Basic Components Customer Components Order Components Report Components","title":"Components"},{"location":"pos/overview/#general-components","text":"Those components are the most used ones. They are used by most - if not all - other components. You'll want to get yourself familiarized with them all if you're new to this source code. Login A component for the login screen PosApp Settings Toolbar","title":"General Components"},{"location":"pos/overview/#customer-components","text":"Those components render common user interface controls relating to customers. CustomerBar CustomerBarButton CustomerEdit CustomerList CustomerViews","title":"Customer Components"},{"location":"pos/overview/#order-components","text":"Those components render common user interface controls relating to orders and payments. OrderCheckout OrderItems OrderPaymentScreen OrderProductScreen OrderResellerScreen OrderSummary OrderSummaryScreen OrderTotal OrderView OrderWalkupScreen ProductList","title":"Order Components"},{"location":"pos/overview/#report-components","text":"Those components render common user interface controls relating to reports. DashboardReport DateFilter InventoryReport SalesReport Sidebar SiteReport","title":"Report Components"},{"location":"pos/test/","text":"The POS Client \u00b6","title":"The POS Client"},{"location":"pos/test/#the-pos-client","text":"","title":"The POS Client"},{"location":"pos/general/Login/","text":"Test","title":"Login"},{"location":"release-notes/dashboard/0.0.0.7/","text":"Dashboard Version 0.0.0.7 \u00b6 This version includes preliminary implementation of Water Operations and Sales . Distribution Map, Delivery Schedule, Inventory Management and Financials contain only 'static' images of what the feature will include when implemented The data shown is for the \"most recent' data in the Sema database. The Sema database is a 'snapshot' of the DloHaiti production database and contains data up until mid-may 2018. (Of course not all kiosks will contain data up until mid-may 2018.) Known limitations and issues \u00b6 Water operations: \u00b6 Only the most 'recent months data' is shown for production, chlorine and TDS charts. Eventually the UI will allow previous data. E.g. last months as well as data by year/quarter or week etc. Some kiosks show 'negative' wastage ??? (We need to determine the fault... Is the data incorrect or the algorithm?) Sales \u00b6 Only the most 'recent months data' is shown. Eventually the UI will allow previous data. E.g. last months as well as data by year/quarter or week etc. Data for customer growth, new customers etc. is not available as the customer_accounts table doesn't (yet) contain date information Net Income data is not available as the receipts table doesn't (yet), include cost of goods sold","title":"Dashboard Version 0.0.0.7"},{"location":"release-notes/dashboard/0.0.0.7/#dashboard-version-0007","text":"This version includes preliminary implementation of Water Operations and Sales . Distribution Map, Delivery Schedule, Inventory Management and Financials contain only 'static' images of what the feature will include when implemented The data shown is for the \"most recent' data in the Sema database. The Sema database is a 'snapshot' of the DloHaiti production database and contains data up until mid-may 2018. (Of course not all kiosks will contain data up until mid-may 2018.)","title":"Dashboard Version 0.0.0.7"},{"location":"release-notes/dashboard/0.0.0.7/#known-limitations-and-issues","text":"","title":"Known limitations and issues"},{"location":"release-notes/dashboard/0.0.0.7/#water-operations","text":"Only the most 'recent months data' is shown for production, chlorine and TDS charts. Eventually the UI will allow previous data. E.g. last months as well as data by year/quarter or week etc. Some kiosks show 'negative' wastage ??? (We need to determine the fault... Is the data incorrect or the algorithm?)","title":"Water operations:"},{"location":"release-notes/dashboard/0.0.0.7/#sales","text":"Only the most 'recent months data' is shown. Eventually the UI will allow previous data. E.g. last months as well as data by year/quarter or week etc. Data for customer growth, new customers etc. is not available as the customer_accounts table doesn't (yet) contain date information Net Income data is not available as the receipts table doesn't (yet), include cost of goods sold","title":"Sales"},{"location":"release-notes/pos/0.0.8/","text":"POS Version 0.0.8 \u00b6 This version does not connect to the back-end servers, data is local to the tablet Login \u00b6 Any username/password is sufficient Toolbar \u00b6 Report Icon will show the sales report Settings Icon is not implemented Logout will logout Tapping Version on the tool bar will clear all sales recorded on the tablet. (This functionality will be moved to Settings when Settings is implemented) Main Screen \u00b6 Add/Edit/Delete to manage customers is not yet implemented. (Buttons are grayed out) Selecting a customer allows an order to be placed via the \"Order\" button Pressing Order starts the order flow, (follow the on screen instructions). Note that the first four items in the product list are Jibu products, (the others are products form Haiti) Report Screen \u00b6 Pressing the Report button on the toolbar will show the report screen. Inventory report is not yet implemented. Daily reports are not yet implemented.","title":"POS Version 0.0.8"},{"location":"release-notes/pos/0.0.8/#pos-version-008","text":"This version does not connect to the back-end servers, data is local to the tablet","title":"POS Version 0.0.8"},{"location":"release-notes/pos/0.0.8/#login","text":"Any username/password is sufficient","title":"Login"},{"location":"release-notes/pos/0.0.8/#toolbar","text":"Report Icon will show the sales report Settings Icon is not implemented Logout will logout Tapping Version on the tool bar will clear all sales recorded on the tablet. (This functionality will be moved to Settings when Settings is implemented)","title":"Toolbar"},{"location":"release-notes/pos/0.0.8/#main-screen","text":"Add/Edit/Delete to manage customers is not yet implemented. (Buttons are grayed out) Selecting a customer allows an order to be placed via the \"Order\" button Pressing Order starts the order flow, (follow the on screen instructions). Note that the first four items in the product list are Jibu products, (the others are products form Haiti)","title":"Main Screen"},{"location":"release-notes/pos/0.0.8/#report-screen","text":"Pressing the Report button on the toolbar will show the report screen. Inventory report is not yet implemented. Daily reports are not yet implemented.","title":"Report Screen"},{"location":"release-notes/pos/0.3.1/","text":"POS Version 0.3.1 \u00b6 This version is fully functional and must be connected to a SEMA service before it can be used. When the app is first run, the settings screen will be presented. This should be filled in and the \"Connect\" button pressed to load the resources needed by the application in order to create customers and record sales. Changes since Version 0.8.0 \u00b6 Android 7\" tablets are supported, (although not recommended) The application always displays in \"landscape:\" mode The \"inventory\" report menu, (Not yet implemented has been removed) Fixes since Version 0.8.0 \u00b6 All outstanding issues have been fixed. Differences from the product requirements specification \u00b6 The POS toolbar does not show the current date/time. The Android status bar, (above the POS toolbar shows time and pressing this will display current date) The list of products in the order basket does not contain an 'X' button to remove a product from the list. To remove a product, tap the item to display the order quantity window, press \"CLEAR\" then \"Done\" The application toolbar shows the application version as well as the ONLINE/OFFLINE status Operational Notes. \u00b6 The POS application will periodically synchronize with the SEMA service. (Currently this occurs every minute but we may want this to be either a client/server setting). This means that all customer changes and sales created on the tablet are sent to the server every minute Since the settings are persisted on the tablet, there are no login requirements when starting the POS app. To secure access, use the logout button on the toolbar. If you need to 'reset' the data, there is a 'Clear...' button on the settings screen. Note that any data not yet sent to the SEMA service will be lost. You can then connect to the SEMA service and customers/products etc will be downloaded. (Alternately you can remove then add the application)","title":"POS Version 0.3.1"},{"location":"release-notes/pos/0.3.1/#pos-version-031","text":"This version is fully functional and must be connected to a SEMA service before it can be used. When the app is first run, the settings screen will be presented. This should be filled in and the \"Connect\" button pressed to load the resources needed by the application in order to create customers and record sales.","title":"POS Version 0.3.1"},{"location":"release-notes/pos/0.3.1/#changes-since-version-080","text":"Android 7\" tablets are supported, (although not recommended) The application always displays in \"landscape:\" mode The \"inventory\" report menu, (Not yet implemented has been removed)","title":"Changes since Version 0.8.0"},{"location":"release-notes/pos/0.3.1/#fixes-since-version-080","text":"All outstanding issues have been fixed.","title":"Fixes since Version 0.8.0"},{"location":"release-notes/pos/0.3.1/#differences-from-the-product-requirements-specification","text":"The POS toolbar does not show the current date/time. The Android status bar, (above the POS toolbar shows time and pressing this will display current date) The list of products in the order basket does not contain an 'X' button to remove a product from the list. To remove a product, tap the item to display the order quantity window, press \"CLEAR\" then \"Done\" The application toolbar shows the application version as well as the ONLINE/OFFLINE status","title":"Differences from the product requirements specification"},{"location":"release-notes/pos/0.3.1/#operational-notes","text":"The POS application will periodically synchronize with the SEMA service. (Currently this occurs every minute but we may want this to be either a client/server setting). This means that all customer changes and sales created on the tablet are sent to the server every minute Since the settings are persisted on the tablet, there are no login requirements when starting the POS app. To secure access, use the logout button on the toolbar. If you need to 'reset' the data, there is a 'Clear...' button on the settings screen. Note that any data not yet sent to the SEMA service will be lost. You can then connect to the SEMA service and customers/products etc will be downloaded. (Alternately you can remove then add the application)","title":"Operational Notes."},{"location":"release-notes/pos/0.3.2/","text":"POS Version 0.3.2 \u00b6 Fixes issues in 0.3.1 Changes since Version 0.3.1 \u00b6 None Fixes since Version 0.3.1 \u00b6 Miscellaneous bug fixes","title":"POS Version 0.3.2"},{"location":"release-notes/pos/0.3.2/#pos-version-032","text":"Fixes issues in 0.3.1","title":"POS Version 0.3.2"},{"location":"release-notes/pos/0.3.2/#changes-since-version-031","text":"None","title":"Changes since Version 0.3.1"},{"location":"release-notes/pos/0.3.2/#fixes-since-version-031","text":"Miscellaneous bug fixes","title":"Fixes since Version 0.3.1"},{"location":"release-notes/pos/0.4.2/","text":"POS Version 0.4.2 \u00b6 Find this release on Github here . Changes/features/fixes since Version 0.4.1 \u00b6 Localization support - The app currently supports Haitian Creole, French and English (default). Feature available from the Settings screen. Dynamic sales channels bar - The sales channels bar at the bottom of the main screen now updates on app synchronization to reflect database sales channel changes. Non water products support - The app now supports other products than water. Rebranding/Debranding - The app is now blend with a basic logo and icons that any SWE can change during customization.","title":"POS Version 0.4.2"},{"location":"release-notes/pos/0.4.2/#pos-version-042","text":"Find this release on Github here .","title":"POS Version 0.4.2"},{"location":"release-notes/pos/0.4.2/#changesfeaturesfixes-since-version-041","text":"Localization support - The app currently supports Haitian Creole, French and English (default). Feature available from the Settings screen. Dynamic sales channels bar - The sales channels bar at the bottom of the main screen now updates on app synchronization to reflect database sales channel changes. Non water products support - The app now supports other products than water. Rebranding/Debranding - The app is now blend with a basic logo and icons that any SWE can change during customization.","title":"Changes/features/fixes since Version 0.4.1"},{"location":"rest-api/overview/","text":"The REST API Server \u00b6 This section documents the REST services offered by the SEMA endpoints. In the future, we will use a software for this. i.e.: Swagger Note The terms site and kiosk are interchangeable. Summary \u00b6 General \u00b6 Endpoint Description sema/health-check Service availability sema/login Logs in via user name/password sema/kiosks List all sites (a.k.a. kiosks) sema/products Retrieve product data, skus, etc. sema/sales-channels Retrieve sales channels sema/customer-types Retrieve customer types Point of Sale (POS) specific \u00b6 Note A POS tablet manages one site Endpoint Description sema/site/customers CRUD for managing customer accounts from the POS application sema/site/receipts Send receipts from POS to the sema service sema/site/product-mrps Gets pricing for products base on site and sales-channel Dashboard/Reports specific \u00b6 Endpoint Description sema/dashboard/site/customer-summary Returns demographics information on customers sema/dashboard/site/receipt-summary Returns water volume and sales information organized by sales channel and filtered by customer information sema/dashboard/site/sales-summary Summarizes sales data sema/dashboard/site/water-summary Sales data by vendor sema/dashboard/site/water-chart Historical sales by sales distribution channel sema/dashboard/site/sales-by-channel-history Historical data on sales organized by sales channel","title":"The REST API Server"},{"location":"rest-api/overview/#the-rest-api-server","text":"This section documents the REST services offered by the SEMA endpoints. In the future, we will use a software for this. i.e.: Swagger Note The terms site and kiosk are interchangeable.","title":"The REST API Server"},{"location":"rest-api/overview/#summary","text":"","title":"Summary"},{"location":"rest-api/overview/#general","text":"Endpoint Description sema/health-check Service availability sema/login Logs in via user name/password sema/kiosks List all sites (a.k.a. kiosks) sema/products Retrieve product data, skus, etc. sema/sales-channels Retrieve sales channels sema/customer-types Retrieve customer types","title":"General"},{"location":"rest-api/overview/#point-of-sale-pos-specific","text":"Note A POS tablet manages one site Endpoint Description sema/site/customers CRUD for managing customer accounts from the POS application sema/site/receipts Send receipts from POS to the sema service sema/site/product-mrps Gets pricing for products base on site and sales-channel","title":"Point of Sale (POS) specific"},{"location":"rest-api/overview/#dashboardreports-specific","text":"Endpoint Description sema/dashboard/site/customer-summary Returns demographics information on customers sema/dashboard/site/receipt-summary Returns water volume and sales information organized by sales channel and filtered by customer information sema/dashboard/site/sales-summary Summarizes sales data sema/dashboard/site/water-summary Sales data by vendor sema/dashboard/site/water-chart Historical sales by sales distribution channel sema/dashboard/site/sales-by-channel-history Historical data on sales organized by sales channel","title":"Dashboard/Reports specific"},{"location":"rest-api/back-office/customer-summary/","text":"Gets demographics information on customers. Endpoints \u00b6 GET sema/dashboard/site/customer-summary Headers \u00b6 Header Required Example Description Authorization YES Authorization : Bearer xxxx . yyyy . zzzz Contains token as received from login Path Parameters \u00b6 None Query Parameters \u00b6 Parameter Required Format Description site-id YES String The site/kiosk for which sales info is being returned begin-date NO String ISO 8601 format Beginning date for customers included end-date NO String ISO 8601 format Ending date for customers included income-gt income-lt NO Number Used to filter customers by income. If Both income-lt and income-gt are specified, all customers whose income is between the ranges will be returned. If income-lt is specified, customers whose income below the value will be included. If income-gt is specified, customers whose income above the value will be included gender NO String 'M' or 'F'. Used to filter customers by gender distance-gt distance-lt NO Number Used to filter customers by distance. If Both distance-lt and distance-gt are specified, all customers whose distance is between the ranges will be returned. If distance-lt is specified, customers whose distance below the value will be included. If distance-gt is specified, customers whose distance above the value will be included Note If either begin-date or end-date is specified, both dates must be included. Sample request \u00b6 1 curl --header \"Authorization: Bearer <token>\" http://localhost:3001/sema/dashboard/site/customer-summary?site-id=1&begin-date=2016-02-02&end-date=2019-09-01&income-gt=2&income-lt=8 Response \u00b6 The response includes the count of customers created that meet the filter criteria plus the potential consumer base for the kiosk. Sample Response \u00b6 1 2 3 4 5 6 7 8 { \"beginDate\" : \"2016-02-02T08:00:00.000Z\" , \"endDate\" : \"2019-09-01T07:00:00.000Z\" , \"incomeGreaterThan\" : \"2\" , \"incomeLessThan\" : \"8\" , \"customerCount\" : 52 , \"consumerBase\" : 400 }","title":"Customer summary"},{"location":"rest-api/back-office/customer-summary/#endpoints","text":"GET sema/dashboard/site/customer-summary","title":"Endpoints"},{"location":"rest-api/back-office/customer-summary/#headers","text":"Header Required Example Description Authorization YES Authorization : Bearer xxxx . yyyy . zzzz Contains token as received from login","title":"Headers"},{"location":"rest-api/back-office/customer-summary/#path-parameters","text":"None","title":"Path Parameters"},{"location":"rest-api/back-office/customer-summary/#query-parameters","text":"Parameter Required Format Description site-id YES String The site/kiosk for which sales info is being returned begin-date NO String ISO 8601 format Beginning date for customers included end-date NO String ISO 8601 format Ending date for customers included income-gt income-lt NO Number Used to filter customers by income. If Both income-lt and income-gt are specified, all customers whose income is between the ranges will be returned. If income-lt is specified, customers whose income below the value will be included. If income-gt is specified, customers whose income above the value will be included gender NO String 'M' or 'F'. Used to filter customers by gender distance-gt distance-lt NO Number Used to filter customers by distance. If Both distance-lt and distance-gt are specified, all customers whose distance is between the ranges will be returned. If distance-lt is specified, customers whose distance below the value will be included. If distance-gt is specified, customers whose distance above the value will be included Note If either begin-date or end-date is specified, both dates must be included.","title":"Query Parameters"},{"location":"rest-api/back-office/customer-summary/#sample-request","text":"1 curl --header \"Authorization: Bearer <token>\" http://localhost:3001/sema/dashboard/site/customer-summary?site-id=1&begin-date=2016-02-02&end-date=2019-09-01&income-gt=2&income-lt=8","title":"Sample request"},{"location":"rest-api/back-office/customer-summary/#response","text":"The response includes the count of customers created that meet the filter criteria plus the potential consumer base for the kiosk.","title":"Response"},{"location":"rest-api/back-office/customer-summary/#sample-response","text":"1 2 3 4 5 6 7 8 { \"beginDate\" : \"2016-02-02T08:00:00.000Z\" , \"endDate\" : \"2019-09-01T07:00:00.000Z\" , \"incomeGreaterThan\" : \"2\" , \"incomeLessThan\" : \"8\" , \"customerCount\" : 52 , \"consumerBase\" : 400 }","title":"Sample Response"},{"location":"rest-api/back-office/receipt-summary/","text":"Gets water volume and sales information organized by sales channel, and filtered by customer income and/or payment type. Endpoints \u00b6 GET sema/dashboard/site/receipt-summary Headers \u00b6 Header Required Example Description Authorization YES Authorization : Bearer xxxx . yyyy . zzzz Contains token as received from login Path Parameters \u00b6 None Query Parameters \u00b6 Parameter Required Format Description site-id YES String The site for which information is requested type YES String Must be \"sales-channel\" begin-date NO String ISO 8601 format end-date NO String ISO 8601 format income-gt income-lt NO Number Used to filter customers by income. If Both income-lt and income-gt are specified, all customers whose income is between the ranges will be returned. If income-lt is specified, customers whose income below the value will be included. If income-gt is specified, customers whose income above the value will be included payment-type NO String Used to filter sales by payment type. May be one of: 'cash', 'mobile', 'loan' or 'card'. Note If either begin-date or end-date are specified, both must be included. Sample request \u00b6 1 curl --header \"Authorization: Bearer <token>\" http://localhost:3001/sema/dashboard/site/receipt-summary?site-id=1&begin-date=2017-01-01&end-date=2018-09-01&type=sales-channel&payment-type=cash Sample Response \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 { \"beginDate\" : \"2017-01-01T08:00:00.000Z\" , \"endDate\" : \"2018-09-01T07:00:00.000Z\" , \"type\" : \"sales-channel\" , \"volume\" : { \"data\" : [ { \"salesChannel\" : \"Household\" , \"volume\" : 3075.8 }, { \"salesChannel\" : \"Main Station\" , \"volume\" : 9812.9 }, { \"salesChannel\" : \"Access Points\" , \"volume\" : 6722.5 }, { \"salesChannel\" : \"Prepaid Meter\" , \"volume\" : 0 } ] }, \"total\" : { \"data\" : [ { \"salesChannel\" : \"Household\" , \"total\" : 197.2 }, { \"salesChannel\" : \"Main Station\" , \"total\" : 795.6 }, { \"salesChannel\" : \"Access Points\" , \"total\" : 428.4 }, { \"salesChannel\" : \"Prepaid Meter\" , \"total\" : 0 } ] }, \"paymentType\" : \"cash\" }","title":"Receipt summary"},{"location":"rest-api/back-office/receipt-summary/#endpoints","text":"GET sema/dashboard/site/receipt-summary","title":"Endpoints"},{"location":"rest-api/back-office/receipt-summary/#headers","text":"Header Required Example Description Authorization YES Authorization : Bearer xxxx . yyyy . zzzz Contains token as received from login","title":"Headers"},{"location":"rest-api/back-office/receipt-summary/#path-parameters","text":"None","title":"Path Parameters"},{"location":"rest-api/back-office/receipt-summary/#query-parameters","text":"Parameter Required Format Description site-id YES String The site for which information is requested type YES String Must be \"sales-channel\" begin-date NO String ISO 8601 format end-date NO String ISO 8601 format income-gt income-lt NO Number Used to filter customers by income. If Both income-lt and income-gt are specified, all customers whose income is between the ranges will be returned. If income-lt is specified, customers whose income below the value will be included. If income-gt is specified, customers whose income above the value will be included payment-type NO String Used to filter sales by payment type. May be one of: 'cash', 'mobile', 'loan' or 'card'. Note If either begin-date or end-date are specified, both must be included.","title":"Query Parameters"},{"location":"rest-api/back-office/receipt-summary/#sample-request","text":"1 curl --header \"Authorization: Bearer <token>\" http://localhost:3001/sema/dashboard/site/receipt-summary?site-id=1&begin-date=2017-01-01&end-date=2018-09-01&type=sales-channel&payment-type=cash","title":"Sample request"},{"location":"rest-api/back-office/receipt-summary/#sample-response","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 { \"beginDate\" : \"2017-01-01T08:00:00.000Z\" , \"endDate\" : \"2018-09-01T07:00:00.000Z\" , \"type\" : \"sales-channel\" , \"volume\" : { \"data\" : [ { \"salesChannel\" : \"Household\" , \"volume\" : 3075.8 }, { \"salesChannel\" : \"Main Station\" , \"volume\" : 9812.9 }, { \"salesChannel\" : \"Access Points\" , \"volume\" : 6722.5 }, { \"salesChannel\" : \"Prepaid Meter\" , \"volume\" : 0 } ] }, \"total\" : { \"data\" : [ { \"salesChannel\" : \"Household\" , \"total\" : 197.2 }, { \"salesChannel\" : \"Main Station\" , \"total\" : 795.6 }, { \"salesChannel\" : \"Access Points\" , \"total\" : 428.4 }, { \"salesChannel\" : \"Prepaid Meter\" , \"total\" : 0 } ] }, \"paymentType\" : \"cash\" }","title":"Sample Response"},{"location":"rest-api/back-office/sales-by-channel-history/","text":"Gets historical data on sales organized by sales channel. Endpoints \u00b6 GET sema/dashboard/site/sales-by-channel-history Headers \u00b6 Header Required Example Description Authorization YES Authorization : Bearer xxxx . yyyy . zzzz Contains token as received from login Path Parameters \u00b6 None Query Parameters \u00b6 Parameter Required Format Description site-id YES String The site for which information is requested begin-date NO String ISO 8601 format Beginning date end-date NO String ISO 8601 format End date group-by NO String ISO 8601 format Aggregrates sales data by \"month\" or \"day\". Default is \"day\" Note If neither ending date nor beginning date are specified, data for the current year is returned. Sample request \u00b6 1 curl --header \"Authorization: Bearer <token>\" \"http://localhost:3001/sema/dashboard/site/sales-by-channel-history?site-id=1&begin-date=2018-01-01&end-date=2018-09-01\" Sample Response \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 { \"salesByChannel\" : { \"beginDate\" : \"2018-01-01T08:00:00.000Z\" , \"endDate\" : \"2018-09-01T07:00:00.000Z\" , \"groupBy\" : \"day\" , \"datasets\" : [ { \"salesChannel\" : \"revendeur\" , \"type\" : \"total\" , \"data\" : [] }, { \"salesChannel\" : \"revendeur\" , \"type\" : \"cogs\" , \"data\" : [] }, { \"salesChannel\" : \"distributeur\" , \"type\" : \"total\" , \"data\" : [] }, { \"salesChannel\" : \"distributeur\" , \"type\" : \"cogs\" , \"data\" : [] } ] } }","title":"Sales by channel history"},{"location":"rest-api/back-office/sales-by-channel-history/#endpoints","text":"GET sema/dashboard/site/sales-by-channel-history","title":"Endpoints"},{"location":"rest-api/back-office/sales-by-channel-history/#headers","text":"Header Required Example Description Authorization YES Authorization : Bearer xxxx . yyyy . zzzz Contains token as received from login","title":"Headers"},{"location":"rest-api/back-office/sales-by-channel-history/#path-parameters","text":"None","title":"Path Parameters"},{"location":"rest-api/back-office/sales-by-channel-history/#query-parameters","text":"Parameter Required Format Description site-id YES String The site for which information is requested begin-date NO String ISO 8601 format Beginning date end-date NO String ISO 8601 format End date group-by NO String ISO 8601 format Aggregrates sales data by \"month\" or \"day\". Default is \"day\" Note If neither ending date nor beginning date are specified, data for the current year is returned.","title":"Query Parameters"},{"location":"rest-api/back-office/sales-by-channel-history/#sample-request","text":"1 curl --header \"Authorization: Bearer <token>\" \"http://localhost:3001/sema/dashboard/site/sales-by-channel-history?site-id=1&begin-date=2018-01-01&end-date=2018-09-01\"","title":"Sample request"},{"location":"rest-api/back-office/sales-by-channel-history/#sample-response","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 { \"salesByChannel\" : { \"beginDate\" : \"2018-01-01T08:00:00.000Z\" , \"endDate\" : \"2018-09-01T07:00:00.000Z\" , \"groupBy\" : \"day\" , \"datasets\" : [ { \"salesChannel\" : \"revendeur\" , \"type\" : \"total\" , \"data\" : [] }, { \"salesChannel\" : \"revendeur\" , \"type\" : \"cogs\" , \"data\" : [] }, { \"salesChannel\" : \"distributeur\" , \"type\" : \"total\" , \"data\" : [] }, { \"salesChannel\" : \"distributeur\" , \"type\" : \"cogs\" , \"data\" : [] } ] } }","title":"Sample Response"},{"location":"rest-api/back-office/sales-summary/","text":"Gets sales summary information for a site. Total customers Total Revenue Cost of goods sold Information on sales to each customer Endpoints \u00b6 GET sema/dashboard/sales/trends Headers \u00b6 Header Required Example Description Authorization YES Authorization : Bearer xxxx . yyyy . zzzz Contains token as received from login Path Parameters \u00b6 None Query Parameters \u00b6 Parameter Required Format Description site-id YES String The site for which information is being returned group-by YES String Used to categorize how historical sales data is organized, i.e. by month, by year etc. (Currently the supported options are \"month\", \"year\", and \"none\" begin-date NO String ISO 8601 format Beginning date for the sales info. If not specified the most recent sales data is returned enddate NO String ISO 8601 format Ending date for the sales info. If not specified the current date is used Sample request \u00b6 1 curl --header \"Authorization: Bearer <token>\" http://localhost:3001/sema/dashboard/site/sales-summary?site-id=1&begin-date=2018-04-01&end-date=2018-04-30&group-by=year Sample Response \u00b6 Notes Each metric return includes a total for the date range specified plus the three most current \"group-by\" values. These values are used to display metric trends. Also the array of customer sales data is sorted by current sales period value (descending{ \"beginDate\" : \"2018-04-01T07:00:00.000Z\" , \"endDate\" : \"2018-04-30T07:00:00.000Z\" , \"totalRevenue\" : { \"total\" : 2379310 , \"period\" : \"year\" , \"periods\" : [ { \"beginDate\" : \"2018-01-01T08:00:00.000Z\" , \"endDate\" : \"2018-04-30T07:00:00.000Z\" , \"value\" : 774665 }, { \"beginDate\" : \"2017-01-01T08:00:00.000Z\" , \"endDate\" : \"2017-12-30T08:00:00.000Z\" , \"value\" : 1544530 }, { \"beginDate\" : \"2016-01-01T08:00:00.000Z\" , \"endDate\" : \"2016-12-30T08:00:00.000Z\" , \"value\" : null } ] }, \"totalCogs\" : { \"total\" : 1189655 , \"period\" : \"year\" , \"periods\" : [ { \"beginDate\" : \"2018-01-01T08:00:00.000Z\" , \"endDate\" : \"2018-04-30T07:00:00.000Z\" , \"value\" : 387332.5 }, { \"beginDate\" : \"2017-01-01T08:00:00.000Z\" , \"endDate\" : \"2017-12-30T08:00:00.000Z\" , \"value\" : 772265 }, { \"beginDate\" : \"2016-01-01T08:00:00.000Z\" , \"endDate\" : \"2016-12-30T08:00:00.000Z\" , \"value\" : null } ] }, \"totalCustomers\" : { \"total\" : 189 , \"period\" : \"year\" , \"periods\" : [ { \"beginDate\" : \"2018-01-01T08:00:00.000Z\" , \"endDate\" : \"2018-04-30T07:00:00.000Z\" , \"value\" : 28 }, { \"beginDate\" : \"2017-01-01T08:00:00.000Z\" , \"endDate\" : \"2017-12-30T08:00:00.000Z\" , \"value\" : 96 }, { \"beginDate\" : \"2016-01-01T08:00:00.000Z\" , \"endDate\" : \"2016-12-30T08:00:00.000Z\" , \"value\" : null } ] }, \"customerCount\" : 1133 , \"customerSales\" : [ { \"name\" : \"Felix Dalmas\" , \"id\" : \"03d280ba-c59c-11e8-8488-ac87a31a5361\" , \"period\" : \"year\" , \"gps\" : \"\" , \"total\" : null , \"periods\" : [ { \"beginDate\" : \"2018-01-01T08:00:00.000Z\" , \"endDate\" : \"2018-04-30T07:00:00.000Z\" , \"value\" : 35640 }, { \"beginDate\" : \"2017-01-01T08:00:00.000Z\" , \"endDate\" : \"2017-12-30T08:00:00.000Z\" , \"value\" : 62760 }, { \"beginDate\" : \"2016-01-01T08:00:00.000Z\" , \"endDate\" : \"2016-12-30T08:00:00.000Z\" , \"value\" : null } ] }, { \"name\" : \"Kaliko Beach\" , \"id\" : \"c0d3c202-c59c-11e8-aff1-ac87a31a5361\" , \"period\" : \"year\" , \"gps\" : \"18.86886 -72.61301\" , \"total\" : null , \"periods\" : [ { \"beginDate\" : \"2018-01-01T08:00:00.000Z\" , \"endDate\" : \"2018-04-30T07:00:00.000Z\" , \"value\" : 34195 }, { \"beginDate\" : \"2017-01-01T08:00:00.000Z\" , \"endDate\" : \"2017-12-30T08:00:00.000Z\" , \"value\" : 87930 }, { \"beginDate\" : \"2016-01-01T08:00:00.000Z\" , \"endDate\" : \"2016-12-30T08:00:00.000Z\" , \"value\" : null } ] }, { \"name\" : \"Unregistered\" , \"id\" : \"ad2c18c2-c59b-11e8-8328-ac87a31a5361\" , \"period\" : \"year\" , \"gps\" : \"\" , \"total\" : null , \"periods\" : [ { \"beginDate\" : \"2018-01-01T08:00:00.000Z\" , \"endDate\" : \"2018-04-30T07:00:00.000Z\" , \"value\" : 33285 }, { \"beginDate\" : \"2017-01-01T08:00:00.000Z\" , \"endDate\" : \"2017-12-30T08:00:00.000Z\" , \"value\" : 49405 }, { \"beginDate\" : \"2016-01-01T08:00:00.000Z\" , \"endDate\" : \"2016-12-30T08:00:00.000Z\" , \"value\" : null } ] }, { \"name\" : \"ludieu Laguerre\" , \"id\" : \"8a9d8aec-c59c-11e8-918c-ac87a31a5361\" , \"period\" : \"year\" , \"gps\" : \"18.83785, -72.57531\" , \"total\" : null , \"periods\" : [ { \"beginDate\" : \"2018-01-01T08:00:00.000Z\" , \"endDate\" : \"2018-04-30T07:00:00.000Z\" , \"value\" : 30600 }, { \"beginDate\" : \"2017-01-01T08:00:00.000Z\" , \"endDate\" : \"2017-12-30T08:00:00.000Z\" , \"value\" : 72260 }, { \"beginDate\" : \"2016-01-01T08:00:00.000Z\" , \"endDate\" : \"2016-12-30T08:00:00.000Z\" , \"value\" : null } ] } ] }","title":"Sales summary"},{"location":"rest-api/back-office/sales-summary/#endpoints","text":"GET sema/dashboard/sales/trends","title":"Endpoints"},{"location":"rest-api/back-office/sales-summary/#headers","text":"Header Required Example Description Authorization YES Authorization : Bearer xxxx . yyyy . zzzz Contains token as received from login","title":"Headers"},{"location":"rest-api/back-office/sales-summary/#path-parameters","text":"None","title":"Path Parameters"},{"location":"rest-api/back-office/sales-summary/#query-parameters","text":"Parameter Required Format Description site-id YES String The site for which information is being returned group-by YES String Used to categorize how historical sales data is organized, i.e. by month, by year etc. (Currently the supported options are \"month\", \"year\", and \"none\" begin-date NO String ISO 8601 format Beginning date for the sales info. If not specified the most recent sales data is returned enddate NO String ISO 8601 format Ending date for the sales info. If not specified the current date is used","title":"Query Parameters"},{"location":"rest-api/back-office/sales-summary/#sample-request","text":"1 curl --header \"Authorization: Bearer <token>\" http://localhost:3001/sema/dashboard/site/sales-summary?site-id=1&begin-date=2018-04-01&end-date=2018-04-30&group-by=year","title":"Sample request"},{"location":"rest-api/back-office/sales-summary/#sample-response","text":"Notes Each metric return includes a total for the date range specified plus the three most current \"group-by\" values. These values are used to display metric trends. Also the array of customer sales data is sorted by current sales period value (descending{ \"beginDate\" : \"2018-04-01T07:00:00.000Z\" , \"endDate\" : \"2018-04-30T07:00:00.000Z\" , \"totalRevenue\" : { \"total\" : 2379310 , \"period\" : \"year\" , \"periods\" : [ { \"beginDate\" : \"2018-01-01T08:00:00.000Z\" , \"endDate\" : \"2018-04-30T07:00:00.000Z\" , \"value\" : 774665 }, { \"beginDate\" : \"2017-01-01T08:00:00.000Z\" , \"endDate\" : \"2017-12-30T08:00:00.000Z\" , \"value\" : 1544530 }, { \"beginDate\" : \"2016-01-01T08:00:00.000Z\" , \"endDate\" : \"2016-12-30T08:00:00.000Z\" , \"value\" : null } ] }, \"totalCogs\" : { \"total\" : 1189655 , \"period\" : \"year\" , \"periods\" : [ { \"beginDate\" : \"2018-01-01T08:00:00.000Z\" , \"endDate\" : \"2018-04-30T07:00:00.000Z\" , \"value\" : 387332.5 }, { \"beginDate\" : \"2017-01-01T08:00:00.000Z\" , \"endDate\" : \"2017-12-30T08:00:00.000Z\" , \"value\" : 772265 }, { \"beginDate\" : \"2016-01-01T08:00:00.000Z\" , \"endDate\" : \"2016-12-30T08:00:00.000Z\" , \"value\" : null } ] }, \"totalCustomers\" : { \"total\" : 189 , \"period\" : \"year\" , \"periods\" : [ { \"beginDate\" : \"2018-01-01T08:00:00.000Z\" , \"endDate\" : \"2018-04-30T07:00:00.000Z\" , \"value\" : 28 }, { \"beginDate\" : \"2017-01-01T08:00:00.000Z\" , \"endDate\" : \"2017-12-30T08:00:00.000Z\" , \"value\" : 96 }, { \"beginDate\" : \"2016-01-01T08:00:00.000Z\" , \"endDate\" : \"2016-12-30T08:00:00.000Z\" , \"value\" : null } ] }, \"customerCount\" : 1133 , \"customerSales\" : [ { \"name\" : \"Felix Dalmas\" , \"id\" : \"03d280ba-c59c-11e8-8488-ac87a31a5361\" , \"period\" : \"year\" , \"gps\" : \"\" , \"total\" : null , \"periods\" : [ { \"beginDate\" : \"2018-01-01T08:00:00.000Z\" , \"endDate\" : \"2018-04-30T07:00:00.000Z\" , \"value\" : 35640 }, { \"beginDate\" : \"2017-01-01T08:00:00.000Z\" , \"endDate\" : \"2017-12-30T08:00:00.000Z\" , \"value\" : 62760 }, { \"beginDate\" : \"2016-01-01T08:00:00.000Z\" , \"endDate\" : \"2016-12-30T08:00:00.000Z\" , \"value\" : null } ] }, { \"name\" : \"Kaliko Beach\" , \"id\" : \"c0d3c202-c59c-11e8-aff1-ac87a31a5361\" , \"period\" : \"year\" , \"gps\" : \"18.86886 -72.61301\" , \"total\" : null , \"periods\" : [ { \"beginDate\" : \"2018-01-01T08:00:00.000Z\" , \"endDate\" : \"2018-04-30T07:00:00.000Z\" , \"value\" : 34195 }, { \"beginDate\" : \"2017-01-01T08:00:00.000Z\" , \"endDate\" : \"2017-12-30T08:00:00.000Z\" , \"value\" : 87930 }, { \"beginDate\" : \"2016-01-01T08:00:00.000Z\" , \"endDate\" : \"2016-12-30T08:00:00.000Z\" , \"value\" : null } ] }, { \"name\" : \"Unregistered\" , \"id\" : \"ad2c18c2-c59b-11e8-8328-ac87a31a5361\" , \"period\" : \"year\" , \"gps\" : \"\" , \"total\" : null , \"periods\" : [ { \"beginDate\" : \"2018-01-01T08:00:00.000Z\" , \"endDate\" : \"2018-04-30T07:00:00.000Z\" , \"value\" : 33285 }, { \"beginDate\" : \"2017-01-01T08:00:00.000Z\" , \"endDate\" : \"2017-12-30T08:00:00.000Z\" , \"value\" : 49405 }, { \"beginDate\" : \"2016-01-01T08:00:00.000Z\" , \"endDate\" : \"2016-12-30T08:00:00.000Z\" , \"value\" : null } ] }, { \"name\" : \"ludieu Laguerre\" , \"id\" : \"8a9d8aec-c59c-11e8-918c-ac87a31a5361\" , \"period\" : \"year\" , \"gps\" : \"18.83785, -72.57531\" , \"total\" : null , \"periods\" : [ { \"beginDate\" : \"2018-01-01T08:00:00.000Z\" , \"endDate\" : \"2018-04-30T07:00:00.000Z\" , \"value\" : 30600 }, { \"beginDate\" : \"2017-01-01T08:00:00.000Z\" , \"endDate\" : \"2017-12-30T08:00:00.000Z\" , \"value\" : 72260 }, { \"beginDate\" : \"2016-01-01T08:00:00.000Z\" , \"endDate\" : \"2016-12-30T08:00:00.000Z\" , \"value\" : null } ] } ] }","title":"Sample Response"},{"location":"rest-api/back-office/water-chart/","text":"Gets historical data on a water reading (production, chlorine, total dissolved solids). Endpoints \u00b6 GET sema/dashboard/site/water-chart Headers \u00b6 Header Required Example Description Authorization YES Authorization : Bearer xxxx . yyyy . zzzz Contains token as received from login Path Parameters \u00b6 None Query Parameters \u00b6 Parameter Required Format Description site-id YES Number The site for which sales info is being returned type YES String Must be one of \"totalchlorine\", \"production\" or \"tds\" begin-date NO String ISO 8601 format Beginning date end-date NO String ISO 8601 format Ending date. group-by NO String optional - When type is \"production\" either month or day default is \"day\". Water production is aggregated daily unless \"month\" is specified. Note If neither ending date nor beginning date are specified, data for the current year is returned Sample request \u00b6 1 curl --header \"Authorization: Bearer <token>\" \"http://localhost:3001/sema/dashboard/site/water-chart?site-id=1&type=production&begin-date=2018-01-01&end-date=2018-09-01\" Sample Response \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 { \"beginDate\" : \"2018-01-01T08:00:00.000Z\" , \"endDate\" : \"2018-09-01T07:00:00.000Z\" , \"type\" : \"production\" , \"data\" : { \"time\" : [ \"2018-01-01T08:00:00.000Z\" , \"2018-01-02T08:00:00.000Z\" , \"2018-01-03T08:00:00.000Z\" , ... ], \"values\" : [ 15915.200000000186 , 15979.810000000056 , 15927.85999999987 , ... ] } }","title":"Water chart"},{"location":"rest-api/back-office/water-chart/#endpoints","text":"GET sema/dashboard/site/water-chart","title":"Endpoints"},{"location":"rest-api/back-office/water-chart/#headers","text":"Header Required Example Description Authorization YES Authorization : Bearer xxxx . yyyy . zzzz Contains token as received from login","title":"Headers"},{"location":"rest-api/back-office/water-chart/#path-parameters","text":"None","title":"Path Parameters"},{"location":"rest-api/back-office/water-chart/#query-parameters","text":"Parameter Required Format Description site-id YES Number The site for which sales info is being returned type YES String Must be one of \"totalchlorine\", \"production\" or \"tds\" begin-date NO String ISO 8601 format Beginning date end-date NO String ISO 8601 format Ending date. group-by NO String optional - When type is \"production\" either month or day default is \"day\". Water production is aggregated daily unless \"month\" is specified. Note If neither ending date nor beginning date are specified, data for the current year is returned","title":"Query Parameters"},{"location":"rest-api/back-office/water-chart/#sample-request","text":"1 curl --header \"Authorization: Bearer <token>\" \"http://localhost:3001/sema/dashboard/site/water-chart?site-id=1&type=production&begin-date=2018-01-01&end-date=2018-09-01\"","title":"Sample request"},{"location":"rest-api/back-office/water-chart/#sample-response","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 { \"beginDate\" : \"2018-01-01T08:00:00.000Z\" , \"endDate\" : \"2018-09-01T07:00:00.000Z\" , \"type\" : \"production\" , \"data\" : { \"time\" : [ \"2018-01-01T08:00:00.000Z\" , \"2018-01-02T08:00:00.000Z\" , \"2018-01-03T08:00:00.000Z\" , ... ], \"values\" : [ 15915.200000000186 , 15979.810000000056 , 15927.85999999987 , ... ] } }","title":"Sample Response"},{"location":"rest-api/back-office/water-summary/","text":"Returns information on water operations such as production, wastage, pressure and flow rate values. Endpoints \u00b6 GET sema/dashboard/site/water-summary Headers \u00b6 Header Required Example Description Authorization YES Authorization : Bearer xxxx . yyyy . zzzz Contains token as received from login Path Parameters \u00b6 None Query Parameters \u00b6 Parameter Required Format Description site-id YES Number begin-date NO String ISO 8601 format Beginning date end-date NO String ISO 8601 format Ending date Sample request \u00b6 1 curl --header \"Authorization: Bearer <token>\" \"http://localhost:3001/sema/dashboard/site/water-summary?site-id=1&begin-date=2017-01-01&end-date=2018-09-01\" Sample Response \u00b6 1 2 3 4 5 6 7 8 9 10 11 { \"beginDate\" : \"2017-01-01T08:00:00.000Z\" , \"endDate\" : \"2018-09-01T07:00:00.000Z\" , \"totalProduction\" : 7602154.24 , \"fillStation\" : 7316744.58 , \"pressurePreMembrane\" : 86.098039 , \"pressurePostMembrane\" : 92.492308 , \"distributionFlowRate\" : null , \"productFlowRate\" : 10.002892 , \"sourceFlowRate\" : 17.993228 }","title":"Water summary"},{"location":"rest-api/back-office/water-summary/#endpoints","text":"GET sema/dashboard/site/water-summary","title":"Endpoints"},{"location":"rest-api/back-office/water-summary/#headers","text":"Header Required Example Description Authorization YES Authorization : Bearer xxxx . yyyy . zzzz Contains token as received from login","title":"Headers"},{"location":"rest-api/back-office/water-summary/#path-parameters","text":"None","title":"Path Parameters"},{"location":"rest-api/back-office/water-summary/#query-parameters","text":"Parameter Required Format Description site-id YES Number begin-date NO String ISO 8601 format Beginning date end-date NO String ISO 8601 format Ending date","title":"Query Parameters"},{"location":"rest-api/back-office/water-summary/#sample-request","text":"1 curl --header \"Authorization: Bearer <token>\" \"http://localhost:3001/sema/dashboard/site/water-summary?site-id=1&begin-date=2017-01-01&end-date=2018-09-01\"","title":"Sample request"},{"location":"rest-api/back-office/water-summary/#sample-response","text":"1 2 3 4 5 6 7 8 9 10 11 { \"beginDate\" : \"2017-01-01T08:00:00.000Z\" , \"endDate\" : \"2018-09-01T07:00:00.000Z\" , \"totalProduction\" : 7602154.24 , \"fillStation\" : 7316744.58 , \"pressurePreMembrane\" : 86.098039 , \"pressurePostMembrane\" : 92.492308 , \"distributionFlowRate\" : null , \"productFlowRate\" : 10.002892 , \"sourceFlowRate\" : 17.993228 }","title":"Sample Response"},{"location":"rest-api/general/customer-types/","text":"The Sema service supports different types of customers. Examples of customer types are school, church, walk-up etc... Endpoints \u00b6 GET sema/customer-types Headers \u00b6 Header Required Example Description Authorization YES Authorization : Bearer xxxx . yyyy . zzzz Contains token as received from login Path Parameters \u00b6 None Query Parameters \u00b6 None Sample request \u00b6 1 curl --header \"Authorization: Bearer <token>\" http://localhost:3001/sema/customer-types Sample Response \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"customerTypes\" : [ { \"id\" : 2 , \"name\" : \"generic\" , \"description\" : null }, { \"id\" : 3 , \"name\" : \"anonymous\" , \"description\" : null } ] }","title":"Customer types"},{"location":"rest-api/general/customer-types/#endpoints","text":"GET sema/customer-types","title":"Endpoints"},{"location":"rest-api/general/customer-types/#headers","text":"Header Required Example Description Authorization YES Authorization : Bearer xxxx . yyyy . zzzz Contains token as received from login","title":"Headers"},{"location":"rest-api/general/customer-types/#path-parameters","text":"None","title":"Path Parameters"},{"location":"rest-api/general/customer-types/#query-parameters","text":"None","title":"Query Parameters"},{"location":"rest-api/general/customer-types/#sample-request","text":"1 curl --header \"Authorization: Bearer <token>\" http://localhost:3001/sema/customer-types","title":"Sample request"},{"location":"rest-api/general/customer-types/#sample-response","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"customerTypes\" : [ { \"id\" : 2 , \"name\" : \"generic\" , \"description\" : null }, { \"id\" : 3 , \"name\" : \"anonymous\" , \"description\" : null } ] }","title":"Sample Response"},{"location":"rest-api/general/health-check/","text":"Determines the status of the SEMA service. Endpoints \u00b6 GET sema/health-check/ Headers \u00b6 None Path Parameters \u00b6 None Query Parameters \u00b6 None Sample request \u00b6 1 curl \"http://localhost:3001/sema/health-check\" Sample Response \u00b6 1 { \"server\" : \"Ok\" , \"database\" : \"Ok\" , \"version\" : \"0.0.1.4\" , \"schema\" : \"sema_sample_core\" }","title":"Health check"},{"location":"rest-api/general/health-check/#endpoints","text":"GET sema/health-check/","title":"Endpoints"},{"location":"rest-api/general/health-check/#headers","text":"None","title":"Headers"},{"location":"rest-api/general/health-check/#path-parameters","text":"None","title":"Path Parameters"},{"location":"rest-api/general/health-check/#query-parameters","text":"None","title":"Query Parameters"},{"location":"rest-api/general/health-check/#sample-request","text":"1 curl \"http://localhost:3001/sema/health-check\"","title":"Sample request"},{"location":"rest-api/general/health-check/#sample-response","text":"1 { \"server\" : \"Ok\" , \"database\" : \"Ok\" , \"version\" : \"0.0.1.4\" , \"schema\" : \"sema_sample_core\" }","title":"Sample Response"},{"location":"rest-api/general/kiosks/","text":"Returns an array of kiosks. Note that many of the subsequent SEMA web services will require a kiosk identifier. Endpoints \u00b6 GET sema/kiosks Headers \u00b6 Header Required Example Description Authorization YES Authorization : Bearer xxxx . yyyy . zzzz Contains token as received from login Path Parameters \u00b6 None Query Parameters \u00b6 None Sample request \u00b6 Note The token length is reduced in size 1 curl --header \"Authorization: Bearer <token>\" http://localhost:3001/sema/kiosks Sample Response \u00b6 1 2 3 4 5 6 7 8 9 { \"kiosks\" : [ { \"id\" : 2 , \"name\" : \"Kiswa\" , \"region_id\" : 2 } ] }","title":"Kiosks"},{"location":"rest-api/general/kiosks/#endpoints","text":"GET sema/kiosks","title":"Endpoints"},{"location":"rest-api/general/kiosks/#headers","text":"Header Required Example Description Authorization YES Authorization : Bearer xxxx . yyyy . zzzz Contains token as received from login","title":"Headers"},{"location":"rest-api/general/kiosks/#path-parameters","text":"None","title":"Path Parameters"},{"location":"rest-api/general/kiosks/#query-parameters","text":"None","title":"Query Parameters"},{"location":"rest-api/general/kiosks/#sample-request","text":"Note The token length is reduced in size 1 curl --header \"Authorization: Bearer <token>\" http://localhost:3001/sema/kiosks","title":"Sample request"},{"location":"rest-api/general/kiosks/#sample-response","text":"1 2 3 4 5 6 7 8 9 { \"kiosks\" : [ { \"id\" : 2 , \"name\" : \"Kiswa\" , \"region_id\" : 2 } ] }","title":"Sample Response"},{"location":"rest-api/general/login/","text":"Log into service. Login will return a Json Web Token. This token is required to authorize all other web services except for sema/health-check . For use in subsequent web services, clients must add the Authorization header as: Authorization : Bearer < token > where <token> is as described below in the body of a successful authorization The token returned will expire after 24 hours. (Clients should keep track of the token expiration time and acquire a new token before the token expiration time) Endpoints \u00b6 POST sema/login Headers \u00b6 None Path Parameters \u00b6 None Query Parameters \u00b6 None POST Body (JSON formatted) \u00b6 Field Name Required Type Description usernameOrEmail YES string User name or email address. (Email address should be used to enable password recovery) password YES string Sample request \u00b6 1 curl --header \"Content-Type: application/json\" --request POST --data '{\"usernameOrEmail\":\"<username>\",\"password\":\"<password>\"}' http://localhost:3001/sema/login Sample Response \u00b6 1 2 3 4 { \"version\" : \"0.0.1.0\" , \"token\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbmlzdHJhdG9yIiwiZW1haWwiOiJhZG1pbkB1bnRhcHBlZC1pbmMuY29tIiwiY3JlYXRlZF9hdCI6IjIwMTgtMDUtMzBUMDE6MTQ6NDcuMDAwWiIsInVwZGF0ZWRfYXQiOiIyMDE4LTA2LTE0VDE0OjU4OjUyLjAwMFoiLCJmaXJzdF9uYW1lIjoiVGVzdCIsImxhc3RfbmFtZSI6IlVzZXIiLCJhY3RpdmUiOnRydWUsInJvbGVzIjpbeyJjb2RlIjoiYWRtaW4iLCJ1c2VyX3JvbGUiOnsicm9sZV9pZCI6MywidXNlcl9pZCI6MSwiaWQiOjV9fSx7ImNvZGUiOiJocSIsInVzZXJfcm9sZSI6eyJyb2xlX2lkIjo0LCJ1c2VyX2lkIjoxLCJpZCI6OH19XSwiaWF0IjoxNTMzNzU0MDc0LCJleHAiOjE1MzM4NDA0NzR9.9fIqWdBUeBh73RpIbIg_UHW9BLqSWfgkR9BzPfzJLEY\" }","title":"Login"},{"location":"rest-api/general/login/#endpoints","text":"POST sema/login","title":"Endpoints"},{"location":"rest-api/general/login/#headers","text":"None","title":"Headers"},{"location":"rest-api/general/login/#path-parameters","text":"None","title":"Path Parameters"},{"location":"rest-api/general/login/#query-parameters","text":"None","title":"Query Parameters"},{"location":"rest-api/general/login/#post-body-json-formatted","text":"Field Name Required Type Description usernameOrEmail YES string User name or email address. (Email address should be used to enable password recovery) password YES string","title":"POST Body (JSON formatted)"},{"location":"rest-api/general/login/#sample-request","text":"1 curl --header \"Content-Type: application/json\" --request POST --data '{\"usernameOrEmail\":\"<username>\",\"password\":\"<password>\"}' http://localhost:3001/sema/login","title":"Sample request"},{"location":"rest-api/general/login/#sample-response","text":"1 2 3 4 { \"version\" : \"0.0.1.0\" , \"token\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbmlzdHJhdG9yIiwiZW1haWwiOiJhZG1pbkB1bnRhcHBlZC1pbmMuY29tIiwiY3JlYXRlZF9hdCI6IjIwMTgtMDUtMzBUMDE6MTQ6NDcuMDAwWiIsInVwZGF0ZWRfYXQiOiIyMDE4LTA2LTE0VDE0OjU4OjUyLjAwMFoiLCJmaXJzdF9uYW1lIjoiVGVzdCIsImxhc3RfbmFtZSI6IlVzZXIiLCJhY3RpdmUiOnRydWUsInJvbGVzIjpbeyJjb2RlIjoiYWRtaW4iLCJ1c2VyX3JvbGUiOnsicm9sZV9pZCI6MywidXNlcl9pZCI6MSwiaWQiOjV9fSx7ImNvZGUiOiJocSIsInVzZXJfcm9sZSI6eyJyb2xlX2lkIjo0LCJ1c2VyX2lkIjoxLCJpZCI6OH19XSwiaWF0IjoxNTMzNzU0MDc0LCJleHAiOjE1MzM4NDA0NzR9.9fIqWdBUeBh73RpIbIg_UHW9BLqSWfgkR9BzPfzJLEY\" }","title":"Sample Response"},{"location":"rest-api/general/products/","text":"Product services. Returns an array of products that can be purchased by customers. Endpoints \u00b6 GET sema/products Headers \u00b6 Header Required Example Description Authorization YES Authorization : Bearer xxxx . yyyy . zzzz Contains token as received from login Path Parameters \u00b6 None Query Parameters \u00b6 Parameter Required Format Description updated-date NO string ISO 8601 format Returns all products whose updated date is LATER than updated-date. Sample request \u00b6 1 curl --header \"authorization: Bearer <token>\" http://localhost:3001/sema/products Sample Response \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 { \"products\" : [ { \"productId\" : 17 , \"active\" : true , \"base64encodedImage\" : \"<Image Data>\" , \"categoryId\" : 3 , \"description\" : \"1.5 Liter water bottle\" , \"maximumQuantity\" : null , \"minimumQuantity\" : null , \"priceAmount\" : 2600 , \"priceCurrency\" : \"UGX\" , \"sku\" : \"sku1\" , \"updatedDate\" : \"2018-01-01T08:00:00.000Z\" , \"unitPerProduct\" : 1.5 , \"unitMeasure\" : \"liters\" , \"cogsAmount\" : 1300 }, { \"productId\" : 18 , \"active\" : true , \"base64encodedImage\" : \"<Image Data>\" , \"categoryId\" : 3 , \"description\" : \"5 Liter water bottle\" , \"maximumQuantity\" : null , \"minimumQuantity\" : null , \"priceAmount\" : 4000 , \"priceCurrency\" : \"UGX\" , \"sku\" : \"sku2\" , \"updatedDate\" : \"2018-01-01T08:00:00.000Z\" , \"unitPerProduct\" : 5 , \"unitMeasure\" : \"liters\" , \"cogsAmount\" : 2000 }, { \"productId\" : 19 , \"active\" : true , \"base64encodedImage\" : \"<Image Data>\" , \"categoryId\" : 3 , \"description\" : \"18.9 Liter water jug\" , \"maximumQuantity\" : null , \"minimumQuantity\" : null , \"priceAmount\" : 20000 , \"priceCurrency\" : \"UGX\" , \"sku\" : \"sku3\" , \"updatedDate\" : \"2018-08-07T03:18:14.000Z\" , \"unitPerProduct\" : 18.9 , \"unitMeasure\" : \"liters\" , \"cogsAmount\" : 10000 }, { \"productId\" : 20 , \"active\" : true , \"base64encodedImage\" : \"<Image Data>\" , \"categoryId\" : 3 , \"description\" : \"20 Liter water jug\" , \"maximumQuantity\" : null , \"minimumQuantity\" : null , \"priceAmount\" : 25000 , \"priceCurrency\" : \"UGX\" , \"sku\" : \"sku4\" , \"updatedDate\" : \"2018-01-01T08:00:00.000Z\" , \"unitPerProduct\" : 20 , \"unitMeasure\" : \"liters\" , \"cogsAmount\" : 13000 } ] }","title":"Products"},{"location":"rest-api/general/products/#endpoints","text":"GET sema/products","title":"Endpoints"},{"location":"rest-api/general/products/#headers","text":"Header Required Example Description Authorization YES Authorization : Bearer xxxx . yyyy . zzzz Contains token as received from login","title":"Headers"},{"location":"rest-api/general/products/#path-parameters","text":"None","title":"Path Parameters"},{"location":"rest-api/general/products/#query-parameters","text":"Parameter Required Format Description updated-date NO string ISO 8601 format Returns all products whose updated date is LATER than updated-date.","title":"Query Parameters"},{"location":"rest-api/general/products/#sample-request","text":"1 curl --header \"authorization: Bearer <token>\" http://localhost:3001/sema/products","title":"Sample request"},{"location":"rest-api/general/products/#sample-response","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 { \"products\" : [ { \"productId\" : 17 , \"active\" : true , \"base64encodedImage\" : \"<Image Data>\" , \"categoryId\" : 3 , \"description\" : \"1.5 Liter water bottle\" , \"maximumQuantity\" : null , \"minimumQuantity\" : null , \"priceAmount\" : 2600 , \"priceCurrency\" : \"UGX\" , \"sku\" : \"sku1\" , \"updatedDate\" : \"2018-01-01T08:00:00.000Z\" , \"unitPerProduct\" : 1.5 , \"unitMeasure\" : \"liters\" , \"cogsAmount\" : 1300 }, { \"productId\" : 18 , \"active\" : true , \"base64encodedImage\" : \"<Image Data>\" , \"categoryId\" : 3 , \"description\" : \"5 Liter water bottle\" , \"maximumQuantity\" : null , \"minimumQuantity\" : null , \"priceAmount\" : 4000 , \"priceCurrency\" : \"UGX\" , \"sku\" : \"sku2\" , \"updatedDate\" : \"2018-01-01T08:00:00.000Z\" , \"unitPerProduct\" : 5 , \"unitMeasure\" : \"liters\" , \"cogsAmount\" : 2000 }, { \"productId\" : 19 , \"active\" : true , \"base64encodedImage\" : \"<Image Data>\" , \"categoryId\" : 3 , \"description\" : \"18.9 Liter water jug\" , \"maximumQuantity\" : null , \"minimumQuantity\" : null , \"priceAmount\" : 20000 , \"priceCurrency\" : \"UGX\" , \"sku\" : \"sku3\" , \"updatedDate\" : \"2018-08-07T03:18:14.000Z\" , \"unitPerProduct\" : 18.9 , \"unitMeasure\" : \"liters\" , \"cogsAmount\" : 10000 }, { \"productId\" : 20 , \"active\" : true , \"base64encodedImage\" : \"<Image Data>\" , \"categoryId\" : 3 , \"description\" : \"20 Liter water jug\" , \"maximumQuantity\" : null , \"minimumQuantity\" : null , \"priceAmount\" : 25000 , \"priceCurrency\" : \"UGX\" , \"sku\" : \"sku4\" , \"updatedDate\" : \"2018-01-01T08:00:00.000Z\" , \"unitPerProduct\" : 20 , \"unitMeasure\" : \"liters\" , \"cogsAmount\" : 13000 } ] }","title":"Sample Response"},{"location":"rest-api/general/sales-channels/","text":"The Sema service supports different sales channels. Sales channels allow product pricing and availability to be customized. For example, a product could be priced differently through the retail and wholesaler sales channels. Endpoints \u00b6 GET sema/sales-channels Headers \u00b6 Header Required Example Description Authorization YES Authorization : Bearer xxxx . yyyy . zzzz Contains token as received from login Path Parameters \u00b6 None Query Parameters \u00b6 None Sample request \u00b6 1 curl --header \"Authorization: Bearer <token>\" http://localhost:3001/sema/sales-channels Sample Response \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"salesChannels\" : [ { \"id\" : 2 , \"name\" : \"walkup\" , \"description\" : null }, { \"id\" : 3 , \"name\" : \"reseller\" , \"description\" : null } ] }","title":"Sales channels"},{"location":"rest-api/general/sales-channels/#endpoints","text":"GET sema/sales-channels","title":"Endpoints"},{"location":"rest-api/general/sales-channels/#headers","text":"Header Required Example Description Authorization YES Authorization : Bearer xxxx . yyyy . zzzz Contains token as received from login","title":"Headers"},{"location":"rest-api/general/sales-channels/#path-parameters","text":"None","title":"Path Parameters"},{"location":"rest-api/general/sales-channels/#query-parameters","text":"None","title":"Query Parameters"},{"location":"rest-api/general/sales-channels/#sample-request","text":"1 curl --header \"Authorization: Bearer <token>\" http://localhost:3001/sema/sales-channels","title":"Sample request"},{"location":"rest-api/general/sales-channels/#sample-response","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"salesChannels\" : [ { \"id\" : 2 , \"name\" : \"walkup\" , \"description\" : null }, { \"id\" : 3 , \"name\" : \"reseller\" , \"description\" : null } ] }","title":"Sample Response"},{"location":"rest-api/pos/customers/","text":"Customer services for a site/kiosk. GET Endpoint \u00b6 GET sema/site/customers Headers \u00b6 Header Required Example Description Authorization YES Authorization : Bearer xxxx . yyyy . zzzz Contains token as received from login Path Parameters \u00b6 None Query Parameters \u00b6 Parameter Required Format Description site-id YES String The site/kiosk for which the customers are being queried begin-date NO String ISO 8601 format Beginning date for the customer info. If not specified all customers up until end-date are returned. end-date NO String ISO 8601 format Ending date. If not specified all customers from the begin-date are returned. updated-date NO String ISO 8601 format Returns all customers whose updated date is LATER than updated-date. Notes updated-date and begin-date/end-date are mutually exclusive If no dates are specified, all customers for the site are returned Sample Request \u00b6 1 curl --header \"Authorization: Bearer <token>\" http://localhost:3001/sema/site/customers?site-id=2 Sample Response \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 { \"customers\" : [ { \"customerId\" : \"225aee42-95f0-11e8-955a-ac87a31a5361\" , \"createdDate\" : \"2018-01-01T08:00:00.000Z\" , \"updatedDate\" : \"2018-08-08T05:47:26.000Z\" , \"active\" : true , \"address\" : \"241 Mistletoe Rd Ca 95032\" , \"name\" : \"Fred O'Leary\" , \"customerTypeId\" : 2 , \"salesChannelId\" : 2 , \"gpsCoordinates\" : \"gps\" , \"siteId\" : 2 , \"phoneNumber\" : \"408-656-2041\" , \"dueAmount\" : 0 }, { \"customerId\" : \"22b7a18c-95f0-11e8-9a65-ac87a31a5361\" , \"createdDate\" : \"2018-02-01T08:00:00.000Z\" , \"updatedDate\" : \"2018-02-01T08:00:00.000Z\" , \"active\" : true , \"address\" : \"test_address\" , \"name\" : \"TestCustomer 2\" , \"customerTypeId\" : 2 , \"salesChannelId\" : 2 , \"gpsCoordinates\" : \"gps\" , \"siteId\" : 2 , \"phoneNumber\" : \"555-1313\" , \"dueAmount\" : 0 }, { \"customerId\" : \"2312dd90-95f0-11e8-9a72-ac87a31a5361\" , \"createdDate\" : \"2018-03-01T08:00:00.000Z\" , \"updatedDate\" : \"2018-03-01T08:00:00.000Z\" , \"active\" : true , \"address\" : \"test_address\" , \"name\" : \"TestCustomer 3\" , \"customerTypeId\" : 2 , \"salesChannelId\" : 2 , \"gpsCoordinates\" : \"gps\" , \"siteId\" : 2 , \"phoneNumber\" : \"555-1414\" , \"dueAmount\" : 0 }, ] } POST Endpoint \u00b6 POST sema/site/customers Used to create a customer. Headers \u00b6 Header Required Example Description Authorization YES Authorization : Bearer xxxx . yyyy . zzzz Contains token as received from login Content-Type YES Content-Type: application/json Path Parameters \u00b6 None Query Parameters \u00b6 None POST Body (JSON formatted) \u00b6 Field Name Required Type Description customerId NO string Unique id for the customer (uuid). If not specified, the REST service will create this field siteId YES number Kiosk/Site identifier address YES string address name YES string User name customerTypeId YES number Customer type identifier (sema/customer-types) salesChannelId YES number Sales channel identifier phoneNumber YES string Phone number gpsCoordinates NO string GPS coordinates, (',' separated) createdDate NO String ISO 8601 format If not specified, the REST service will create this with the current date/time updatedDate NO String ISO 8601 format If not specified, the REST service will set this the same as the createdDate gender NO string Sample request \u00b6 1 curl --header \"Authorization: Bearer <token>\" -d '{\"name\":\"post customer\",\"siteId\":1,\"customerTypeId\":1,\"salesChannelId\":3,\"address\":\"1234 main st\",\"phoneNumber\":\"555-1212\"}' -H \"Content-Type: application/json\" -X POST localhost:3001/sema/site/customers/ Sample Response \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"customerId\" : \"6794d3c0-d0cd-11e8-8c05-1174232b1a96\" , \"createdDate\" : \"2018-10-15T22:55:25.948Z\" , \"updatedDate\" : \"2018-10-15T22:55:25.948Z\" , \"active\" : true , \"address\" : \"1234 main st\" , \"name\" : \"post customer\" , \"customerTypeId\" : 1 , \"salesChannelId\" : 3 , \"gpsCoordinates\" : \"\" , \"siteId\" : 1 , \"phoneNumber\" : \"555-1212\" , \"dueAmount\" : 0 } PUT Endpoint \u00b6 PUT sema/site/customers/{customerId} Used to update a customer. Note If a customer is referenced by another entity, it cannot be deleted. Instead it will be deactivated. Headers \u00b6 Header Required Example Description Authorization YES Authorization : Bearer xxxx . yyyy . zzzz Contains token as received from login Content-Type YES Content-Type: application/json Path Parameters \u00b6 CustomerId - The id of the customer being updated Query Parameters \u00b6 None PUT Body (JSON formatted) \u00b6 Field Name Required Type Description active NO boolean Used to activate/deactivate a customer address NO string address name NO string User name customerTypeId YES number Customer type identifier (sema/customer-types) salesChannelId NO number Sales channel identifier phoneNumber NO string Phone number gpsCoordinates NO string GPS coordinates, (',' separated) createdDate NO String ISO 8601 format If not specified, the REST service will create this with the current date/time updatedDate NO String ISO 8601 format If not specified, the REST service will set this the same as the createdDate gender NO string Sample request \u00b6 1 curl --header \"Authorization: Bearer <token>\" -d '{ \"gpsCoordinates\":\"41.2865,174.7762\"}' -H \"Content-Type: application/json\" -X PUT localhost:3001/sema/site/customers/6794d3c0-d0cd-11e8-8c05-1174232b1a96 Sample Response \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"customerId\" : \"6794d3c0-d0cd-11e8-8c05-1174232b1a96\" , \"createdDate\" : \"2018-10-16T05:55:25.000Z\" , \"updatedDate\" : \"2018-10-15T23:12:42.418Z\" , \"active\" : true , \"address\" : \"1234 main st\" , \"name\" : \"post customer\" , \"customerTypeId\" : 1 , \"salesChannelId\" : 3 , \"gpsCoordinates\" : \"41.2865,174.7762\" , \"siteId\" : 1 , \"phoneNumber\" : \"555-1212\" , \"dueAmount\" : 0 } DELETE Endpoint \u00b6 DELETE sema/site/customers/{customerId} Used to delete a customer. Note If a customer is referenced by another entity, it cannot be deleted. Instead it will be deactivated via PUT . Headers \u00b6 Header Required Example Description Authorization YES Authorization : Bearer xxxx . yyyy . zzzz Contains token as received from login Content-Type YES Content-Type: application/json Path Parameters \u00b6 CustomerId - The id of the customer being deleted Query Parameters \u00b6 None Sample request \u00b6 1 curl --header \"Authorization: Bearer <token>\" -X DELETE localhost:3001/sema/site/customers/6794d3c0-d0cd-11e8-8c05-1174232b1a96","title":"Customers"},{"location":"rest-api/pos/customers/#get-endpoint","text":"GET sema/site/customers","title":"GET Endpoint"},{"location":"rest-api/pos/customers/#headers","text":"Header Required Example Description Authorization YES Authorization : Bearer xxxx . yyyy . zzzz Contains token as received from login","title":"Headers"},{"location":"rest-api/pos/customers/#path-parameters","text":"None","title":"Path Parameters"},{"location":"rest-api/pos/customers/#query-parameters","text":"Parameter Required Format Description site-id YES String The site/kiosk for which the customers are being queried begin-date NO String ISO 8601 format Beginning date for the customer info. If not specified all customers up until end-date are returned. end-date NO String ISO 8601 format Ending date. If not specified all customers from the begin-date are returned. updated-date NO String ISO 8601 format Returns all customers whose updated date is LATER than updated-date. Notes updated-date and begin-date/end-date are mutually exclusive If no dates are specified, all customers for the site are returned","title":"Query Parameters"},{"location":"rest-api/pos/customers/#sample-request","text":"1 curl --header \"Authorization: Bearer <token>\" http://localhost:3001/sema/site/customers?site-id=2","title":"Sample Request"},{"location":"rest-api/pos/customers/#sample-response","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 { \"customers\" : [ { \"customerId\" : \"225aee42-95f0-11e8-955a-ac87a31a5361\" , \"createdDate\" : \"2018-01-01T08:00:00.000Z\" , \"updatedDate\" : \"2018-08-08T05:47:26.000Z\" , \"active\" : true , \"address\" : \"241 Mistletoe Rd Ca 95032\" , \"name\" : \"Fred O'Leary\" , \"customerTypeId\" : 2 , \"salesChannelId\" : 2 , \"gpsCoordinates\" : \"gps\" , \"siteId\" : 2 , \"phoneNumber\" : \"408-656-2041\" , \"dueAmount\" : 0 }, { \"customerId\" : \"22b7a18c-95f0-11e8-9a65-ac87a31a5361\" , \"createdDate\" : \"2018-02-01T08:00:00.000Z\" , \"updatedDate\" : \"2018-02-01T08:00:00.000Z\" , \"active\" : true , \"address\" : \"test_address\" , \"name\" : \"TestCustomer 2\" , \"customerTypeId\" : 2 , \"salesChannelId\" : 2 , \"gpsCoordinates\" : \"gps\" , \"siteId\" : 2 , \"phoneNumber\" : \"555-1313\" , \"dueAmount\" : 0 }, { \"customerId\" : \"2312dd90-95f0-11e8-9a72-ac87a31a5361\" , \"createdDate\" : \"2018-03-01T08:00:00.000Z\" , \"updatedDate\" : \"2018-03-01T08:00:00.000Z\" , \"active\" : true , \"address\" : \"test_address\" , \"name\" : \"TestCustomer 3\" , \"customerTypeId\" : 2 , \"salesChannelId\" : 2 , \"gpsCoordinates\" : \"gps\" , \"siteId\" : 2 , \"phoneNumber\" : \"555-1414\" , \"dueAmount\" : 0 }, ] }","title":"Sample Response"},{"location":"rest-api/pos/customers/#post-endpoint","text":"POST sema/site/customers Used to create a customer.","title":"POST Endpoint"},{"location":"rest-api/pos/customers/#headers_1","text":"Header Required Example Description Authorization YES Authorization : Bearer xxxx . yyyy . zzzz Contains token as received from login Content-Type YES Content-Type: application/json","title":"Headers"},{"location":"rest-api/pos/customers/#path-parameters_1","text":"None","title":"Path Parameters"},{"location":"rest-api/pos/customers/#query-parameters_1","text":"None","title":"Query Parameters"},{"location":"rest-api/pos/customers/#post-body-json-formatted","text":"Field Name Required Type Description customerId NO string Unique id for the customer (uuid). If not specified, the REST service will create this field siteId YES number Kiosk/Site identifier address YES string address name YES string User name customerTypeId YES number Customer type identifier (sema/customer-types) salesChannelId YES number Sales channel identifier phoneNumber YES string Phone number gpsCoordinates NO string GPS coordinates, (',' separated) createdDate NO String ISO 8601 format If not specified, the REST service will create this with the current date/time updatedDate NO String ISO 8601 format If not specified, the REST service will set this the same as the createdDate gender NO string","title":"POST Body (JSON formatted)"},{"location":"rest-api/pos/customers/#sample-request_1","text":"1 curl --header \"Authorization: Bearer <token>\" -d '{\"name\":\"post customer\",\"siteId\":1,\"customerTypeId\":1,\"salesChannelId\":3,\"address\":\"1234 main st\",\"phoneNumber\":\"555-1212\"}' -H \"Content-Type: application/json\" -X POST localhost:3001/sema/site/customers/","title":"Sample request"},{"location":"rest-api/pos/customers/#sample-response_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"customerId\" : \"6794d3c0-d0cd-11e8-8c05-1174232b1a96\" , \"createdDate\" : \"2018-10-15T22:55:25.948Z\" , \"updatedDate\" : \"2018-10-15T22:55:25.948Z\" , \"active\" : true , \"address\" : \"1234 main st\" , \"name\" : \"post customer\" , \"customerTypeId\" : 1 , \"salesChannelId\" : 3 , \"gpsCoordinates\" : \"\" , \"siteId\" : 1 , \"phoneNumber\" : \"555-1212\" , \"dueAmount\" : 0 }","title":"Sample Response"},{"location":"rest-api/pos/customers/#put-endpoint","text":"PUT sema/site/customers/{customerId} Used to update a customer. Note If a customer is referenced by another entity, it cannot be deleted. Instead it will be deactivated.","title":"PUT Endpoint"},{"location":"rest-api/pos/customers/#headers_2","text":"Header Required Example Description Authorization YES Authorization : Bearer xxxx . yyyy . zzzz Contains token as received from login Content-Type YES Content-Type: application/json","title":"Headers"},{"location":"rest-api/pos/customers/#path-parameters_2","text":"CustomerId - The id of the customer being updated","title":"Path Parameters"},{"location":"rest-api/pos/customers/#query-parameters_2","text":"None","title":"Query Parameters"},{"location":"rest-api/pos/customers/#put-body-json-formatted","text":"Field Name Required Type Description active NO boolean Used to activate/deactivate a customer address NO string address name NO string User name customerTypeId YES number Customer type identifier (sema/customer-types) salesChannelId NO number Sales channel identifier phoneNumber NO string Phone number gpsCoordinates NO string GPS coordinates, (',' separated) createdDate NO String ISO 8601 format If not specified, the REST service will create this with the current date/time updatedDate NO String ISO 8601 format If not specified, the REST service will set this the same as the createdDate gender NO string","title":"PUT Body (JSON formatted)"},{"location":"rest-api/pos/customers/#sample-request_2","text":"1 curl --header \"Authorization: Bearer <token>\" -d '{ \"gpsCoordinates\":\"41.2865,174.7762\"}' -H \"Content-Type: application/json\" -X PUT localhost:3001/sema/site/customers/6794d3c0-d0cd-11e8-8c05-1174232b1a96","title":"Sample request"},{"location":"rest-api/pos/customers/#sample-response_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"customerId\" : \"6794d3c0-d0cd-11e8-8c05-1174232b1a96\" , \"createdDate\" : \"2018-10-16T05:55:25.000Z\" , \"updatedDate\" : \"2018-10-15T23:12:42.418Z\" , \"active\" : true , \"address\" : \"1234 main st\" , \"name\" : \"post customer\" , \"customerTypeId\" : 1 , \"salesChannelId\" : 3 , \"gpsCoordinates\" : \"41.2865,174.7762\" , \"siteId\" : 1 , \"phoneNumber\" : \"555-1212\" , \"dueAmount\" : 0 }","title":"Sample Response"},{"location":"rest-api/pos/customers/#delete-endpoint","text":"DELETE sema/site/customers/{customerId} Used to delete a customer. Note If a customer is referenced by another entity, it cannot be deleted. Instead it will be deactivated via PUT .","title":"DELETE Endpoint"},{"location":"rest-api/pos/customers/#headers_3","text":"Header Required Example Description Authorization YES Authorization : Bearer xxxx . yyyy . zzzz Contains token as received from login Content-Type YES Content-Type: application/json","title":"Headers"},{"location":"rest-api/pos/customers/#path-parameters_3","text":"CustomerId - The id of the customer being deleted","title":"Path Parameters"},{"location":"rest-api/pos/customers/#query-parameters_3","text":"None","title":"Query Parameters"},{"location":"rest-api/pos/customers/#sample-request_3","text":"1 curl --header \"Authorization: Bearer <token>\" -X DELETE localhost:3001/sema/site/customers/6794d3c0-d0cd-11e8-8c05-1174232b1a96","title":"Sample request"},{"location":"rest-api/pos/product-mrps/","text":"Product - sales-channel mappings. This service returns information on how products are priced for each kiosk/site and sales channel combination. Pricing information includes both sales price plus the cost of goods sold. Endpoints \u00b6 GET sema/site/product-mrps Header Required Example Description Authorization YES Authorization : Bearer xxxx . yyyy . zzzz Contains token as received from login Path Parameters \u00b6 None Query Parameters \u00b6 Parameter Required Format Description site-id YES String The site(kiosk) for which the customers are being queried updated-date NO string ISO 8601 format Returns all product mrps whose updated date is LATER than updated-date. Sample request \u00b6 1 curl --header \"Authorization: Bearer <token>\" http://localhost:3001/sema/site/product-mrps?site-id=2 Sample Response \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 { \"productMRPs\" : [ { \"id\" : 1 , \"siteId\" : 2 , \"productId\" : 17 , \"salesChannelId\" : 2 , \"priceAmount\" : 2600.01 , \"currencyCode\" : \"UGX\" , \"cogsAmount\" : 1300 }, { \"id\" : 2 , \"siteId\" : 2 , \"productId\" : 17 , \"salesChannelId\" : 3 , \"priceAmount\" : 2340 , \"currencyCode\" : \"UGX\" , \"cogsAmount\" : 1300 }, { \"id\" : 3 , \"siteId\" : 2 , \"productId\" : 18 , \"salesChannelId\" : 2 , \"priceAmount\" : 4000 , \"currencyCode\" : \"UGX\" , \"cogsAmount\" : 2000 }, { \"id\" : 4 , \"siteId\" : 2 , \"productId\" : 18 , \"salesChannelId\" : 3 , \"priceAmount\" : 3600 , \"currencyCode\" : \"UGX\" , \"cogsAmount\" : 2000 }, { \"id\" : 5 , \"siteId\" : 2 , \"productId\" : 19 , \"salesChannelId\" : 2 , \"priceAmount\" : 20000 , \"currencyCode\" : \"UGX\" , \"cogsAmount\" : 10000 }, { \"id\" : 6 , \"siteId\" : 2 , \"productId\" : 19 , \"salesChannelId\" : 3 , \"priceAmount\" : 18000 , \"currencyCode\" : \"UGX\" , \"cogsAmount\" : 10000 }, { \"id\" : 7 , \"siteId\" : 2 , \"productId\" : 20 , \"salesChannelId\" : 2 , \"priceAmount\" : 25000 , \"currencyCode\" : \"UGX\" , \"cogsAmount\" : 13000 }, { \"id\" : 8 , \"siteId\" : 2 , \"productId\" : 20 , \"salesChannelId\" : 3 , \"priceAmount\" : 22500 , \"currencyCode\" : \"UGX\" , \"cogsAmount\" : 13000 }, { \"id\" : 9 , \"siteId\" : 2 , \"productId\" : 21 , \"salesChannelId\" : 2 , \"priceAmount\" : 25000 , \"currencyCode\" : \"UGX\" , \"cogsAmount\" : 13000 }, { \"id\" : 10 , \"siteId\" : 2 , \"productId\" : 21 , \"salesChannelId\" : 3 , \"priceAmount\" : 22500 , \"currencyCode\" : \"UGX\" , \"cogsAmount\" : 13000 } ] }","title":"Product mrps"},{"location":"rest-api/pos/product-mrps/#endpoints","text":"GET sema/site/product-mrps Header Required Example Description Authorization YES Authorization : Bearer xxxx . yyyy . zzzz Contains token as received from login","title":"Endpoints"},{"location":"rest-api/pos/product-mrps/#path-parameters","text":"None","title":"Path Parameters"},{"location":"rest-api/pos/product-mrps/#query-parameters","text":"Parameter Required Format Description site-id YES String The site(kiosk) for which the customers are being queried updated-date NO string ISO 8601 format Returns all product mrps whose updated date is LATER than updated-date.","title":"Query Parameters"},{"location":"rest-api/pos/product-mrps/#sample-request","text":"1 curl --header \"Authorization: Bearer <token>\" http://localhost:3001/sema/site/product-mrps?site-id=2","title":"Sample request"},{"location":"rest-api/pos/product-mrps/#sample-response","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 { \"productMRPs\" : [ { \"id\" : 1 , \"siteId\" : 2 , \"productId\" : 17 , \"salesChannelId\" : 2 , \"priceAmount\" : 2600.01 , \"currencyCode\" : \"UGX\" , \"cogsAmount\" : 1300 }, { \"id\" : 2 , \"siteId\" : 2 , \"productId\" : 17 , \"salesChannelId\" : 3 , \"priceAmount\" : 2340 , \"currencyCode\" : \"UGX\" , \"cogsAmount\" : 1300 }, { \"id\" : 3 , \"siteId\" : 2 , \"productId\" : 18 , \"salesChannelId\" : 2 , \"priceAmount\" : 4000 , \"currencyCode\" : \"UGX\" , \"cogsAmount\" : 2000 }, { \"id\" : 4 , \"siteId\" : 2 , \"productId\" : 18 , \"salesChannelId\" : 3 , \"priceAmount\" : 3600 , \"currencyCode\" : \"UGX\" , \"cogsAmount\" : 2000 }, { \"id\" : 5 , \"siteId\" : 2 , \"productId\" : 19 , \"salesChannelId\" : 2 , \"priceAmount\" : 20000 , \"currencyCode\" : \"UGX\" , \"cogsAmount\" : 10000 }, { \"id\" : 6 , \"siteId\" : 2 , \"productId\" : 19 , \"salesChannelId\" : 3 , \"priceAmount\" : 18000 , \"currencyCode\" : \"UGX\" , \"cogsAmount\" : 10000 }, { \"id\" : 7 , \"siteId\" : 2 , \"productId\" : 20 , \"salesChannelId\" : 2 , \"priceAmount\" : 25000 , \"currencyCode\" : \"UGX\" , \"cogsAmount\" : 13000 }, { \"id\" : 8 , \"siteId\" : 2 , \"productId\" : 20 , \"salesChannelId\" : 3 , \"priceAmount\" : 22500 , \"currencyCode\" : \"UGX\" , \"cogsAmount\" : 13000 }, { \"id\" : 9 , \"siteId\" : 2 , \"productId\" : 21 , \"salesChannelId\" : 2 , \"priceAmount\" : 25000 , \"currencyCode\" : \"UGX\" , \"cogsAmount\" : 13000 }, { \"id\" : 10 , \"siteId\" : 2 , \"productId\" : 21 , \"salesChannelId\" : 3 , \"priceAmount\" : 22500 , \"currencyCode\" : \"UGX\" , \"cogsAmount\" : 13000 } ] }","title":"Sample Response"},{"location":"rest-api/pos/receipts/","text":"Receipt services for a site/kiosk. There is only one receipt service, the POST service from the tablet application to the service to register product sales. Endpoints \u00b6 POST sema/site/receipts Headers \u00b6 Header Required Example Description Authorization YES Authorization : Bearer xxxx . yyyy . zzzz Contains token as received from login content-Type YES Content-Type: application/json Path Parameters \u00b6 None Query Parameters \u00b6 None POST Body (JSON formatted) \u00b6 Field Name Required Type Description id YES String Unique Id for the receipt createdDate YES String ISO 8601 format. customerId YES String Customer identifier paymentType YES String Use \"\", reserved for future use currencyCode YES String Standard currency code. i.e.: USD, NZD etc siteId YES Number site/kiosk identifier customerTypeId YES Number Customer type identifier total YES Number total amount cogs YES Number Cost of goods sold salesChannelId YES Number Sales channel identifier for the sale receiptId YES String Additional, (client side), receipt id products NO Array Array of products purchased Each product has the following information: Field Name Required Type Description productId YES Number Product identifier quantity YES Number Number sold priceTotal YES Number Sales/item * quantity cogsTotal YES Number Cost of goods sold sku YES String Product sku","title":"Receipts"},{"location":"rest-api/pos/receipts/#endpoints","text":"POST sema/site/receipts","title":"Endpoints"},{"location":"rest-api/pos/receipts/#headers","text":"Header Required Example Description Authorization YES Authorization : Bearer xxxx . yyyy . zzzz Contains token as received from login content-Type YES Content-Type: application/json","title":"Headers"},{"location":"rest-api/pos/receipts/#path-parameters","text":"None","title":"Path Parameters"},{"location":"rest-api/pos/receipts/#query-parameters","text":"None","title":"Query Parameters"},{"location":"rest-api/pos/receipts/#post-body-json-formatted","text":"Field Name Required Type Description id YES String Unique Id for the receipt createdDate YES String ISO 8601 format. customerId YES String Customer identifier paymentType YES String Use \"\", reserved for future use currencyCode YES String Standard currency code. i.e.: USD, NZD etc siteId YES Number site/kiosk identifier customerTypeId YES Number Customer type identifier total YES Number total amount cogs YES Number Cost of goods sold salesChannelId YES Number Sales channel identifier for the sale receiptId YES String Additional, (client side), receipt id products NO Array Array of products purchased Each product has the following information: Field Name Required Type Description productId YES Number Product identifier quantity YES Number Number sold priceTotal YES Number Sales/item * quantity cogsTotal YES Number Cost of goods sold sku YES String Product sku","title":"POST Body (JSON formatted)"}]}